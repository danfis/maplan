---- pddl/CityCar-domain.pddl ----
(
    define [1]
    (
        domain [2]
        citycar [-1]
    )
    (
        :requirements [3]
        :typing [12]
        :equality [15]
        :negative-preconditions [13]
        :action-costs [28]
        :conditional-effects [18]
    )
    (
        :types [4]
        car [-1]
        junction [-1]
        garage [-1]
        road [-1]
    )
    (
        :predicates [6]
        (
            same_line [-1]
            ?xy [-1]
            - [-1]
            junction [-1]
            ?xy2 [-1]
            - [-1]
            junction [-1]
        )
        (
            diagonal [-1]
            ?x [-1]
            - [-1]
            junction [-1]
            ?y [-1]
            - [-1]
            junction [-1]
        )
        (
            at_car_jun [-1]
            ?c [-1]
            - [-1]
            car [-1]
            ?x [-1]
            - [-1]
            junction [-1]
        )
        (
            at_car_road [-1]
            ?c [-1]
            - [-1]
            car [-1]
            ?x [-1]
            - [-1]
            road [-1]
        )
        (
            starting [-1]
            ?c [-1]
            - [-1]
            car [-1]
            ?x [-1]
            - [-1]
            garage [-1]
        )
        (
            arrived [-1]
            ?c [-1]
            - [-1]
            car [-1]
            ?x [-1]
            - [-1]
            junction [-1]
        )
        (
            road_connect [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
            ?xy [-1]
            - [-1]
            junction [-1]
            ?xy2 [-1]
            - [-1]
            junction [-1]
        )
        (
            clear [-1]
            ?xy [-1]
            - [-1]
            junction [-1]
        )
        (
            in_place [-1]
            ?x [-1]
            - [-1]
            road [-1]
        )
        (
            at_garage [-1]
            ?g [-1]
            - [-1]
            garage [-1]
            ?xy [-1]
            - [-1]
            junction [-1]
        )
    )
    (
        :functions [35]
        (
            total-cost [-1]
        )
        - [-1]
        number [36]
    )
    (
        :action [7]
        move_car_in_road [-1]
        :parameters [8]
        (
            ?xy_initial [-1]
            - [-1]
            junction [-1]
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?machine [-1]
            - [-1]
            car [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at_car_jun [-1]
                ?machine [-1]
                ?xy_initial [-1]
            )
            (
                not [47]
                (
                    = [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                road_connect [-1]
                ?r1 [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                in_place [-1]
                ?r1 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                clear [-1]
                ?xy_initial [-1]
            )
            (
                at_car_road [-1]
                ?machine [-1]
                ?r1 [-1]
            )
            (
                not [47]
                (
                    at_car_jun [-1]
                    ?machine [-1]
                    ?xy_initial [-1]
                )
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                1 [-1]
            )
        )
    )
    (
        :action [7]
        move_car_out_road [-1]
        :parameters [8]
        (
            ?xy_initial [-1]
            - [-1]
            junction [-1]
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?machine [-1]
            - [-1]
            car [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at_car_road [-1]
                ?machine [-1]
                ?r1 [-1]
            )
            (
                clear [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    = [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                road_connect [-1]
                ?r1 [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                in_place [-1]
                ?r1 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                at_car_jun [-1]
                ?machine [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    clear [-1]
                    ?xy_final [-1]
                )
            )
            (
                not [47]
                (
                    at_car_road [-1]
                    ?machine [-1]
                    ?r1 [-1]
                )
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                1 [-1]
            )
        )
    )
    (
        :action [7]
        car_arrived [-1]
        :parameters [8]
        (
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?machine [-1]
            - [-1]
            car [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at_car_jun [-1]
                ?machine [-1]
                ?xy_final [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                clear [-1]
                ?xy_final [-1]
            )
            (
                arrived [-1]
                ?machine [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    at_car_jun [-1]
                    ?machine [-1]
                    ?xy_final [-1]
                )
            )
        )
    )
    (
        :action [7]
        car_start [-1]
        :parameters [8]
        (
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?machine [-1]
            - [-1]
            car [-1]
            ?g [-1]
            - [-1]
            garage [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at_garage [-1]
                ?g [-1]
                ?xy_final [-1]
            )
            (
                starting [-1]
                ?machine [-1]
                ?g [-1]
            )
            (
                clear [-1]
                ?xy_final [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    clear [-1]
                    ?xy_final [-1]
                )
            )
            (
                at_car_jun [-1]
                ?machine [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    starting [-1]
                    ?machine [-1]
                    ?g [-1]
                )
            )
        )
    )
    (
        :action [7]
        build_diagonal_oneway [-1]
        :parameters [8]
        (
            ?xy_initial [-1]
            - [-1]
            junction [-1]
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                clear [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    = [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                not [47]
                (
                    in_place [-1]
                    ?r1 [-1]
                )
            )
            (
                diagonal [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                road_connect [-1]
                ?r1 [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                in_place [-1]
                ?r1 [-1]
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                30 [-1]
            )
        )
    )
    (
        :action [7]
        build_straight_oneway [-1]
        :parameters [8]
        (
            ?xy_initial [-1]
            - [-1]
            junction [-1]
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                clear [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    = [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                same_line [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    in_place [-1]
                    ?r1 [-1]
                )
            )
        )
        :effect [10]
        (
            and [45]
            (
                road_connect [-1]
                ?r1 [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                in_place [-1]
                ?r1 [-1]
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                20 [-1]
            )
        )
    )
    (
        :action [7]
        destroy_road [-1]
        :parameters [8]
        (
            ?xy_initial [-1]
            - [-1]
            junction [-1]
            ?xy_final [-1]
            - [-1]
            junction [-1]
            ?r1 [-1]
            - [-1]
            road [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                road_connect [-1]
                ?r1 [-1]
                ?xy_initial [-1]
                ?xy_final [-1]
            )
            (
                not [47]
                (
                    = [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                in_place [-1]
                ?r1 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    in_place [-1]
                    ?r1 [-1]
                )
            )
            (
                not [47]
                (
                    road_connect [-1]
                    ?r1 [-1]
                    ?xy_initial [-1]
                    ?xy_final [-1]
                )
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                10 [-1]
            )
            (
                forall [50]
                (
                    ?c1 [-1]
                    - [-1]
                    car [-1]
                )
                (
                    when [51]
                    (
                        at_car_road [-1]
                        ?c1 [-1]
                        ?r1 [-1]
                    )
                    (
                        and [45]
                        (
                            not [47]
                            (
                                at_car_road [-1]
                                ?c1 [-1]
                                ?r1 [-1]
                            )
                        )
                        (
                            at_car_jun [-1]
                            ?c1 [-1]
                            ?xy_initial [-1]
                        )
                    )
                )
            )
        )
    )
)
---- pddl/CityCar-domain.pddl END ----
---- pddl/CityCar-p3-2-2-0-1.pddl ----
(
    define [1]
    (
        problem [37]
        citycar-3-3-2 [-1]
    )
    (
        :domain [2]
        citycar [-1]
    )
    (
        :objects [38]
        junction0-0 [-1]
        junction0-1 [-1]
        junction0-2 [-1]
        junction1-0 [-1]
        junction1-1 [-1]
        junction1-2 [-1]
        junction2-0 [-1]
        junction2-1 [-1]
        junction2-2 [-1]
        - [-1]
        junction [-1]
        car0 [-1]
        car1 [-1]
        - [-1]
        car [-1]
        garage0 [-1]
        garage1 [-1]
        - [-1]
        garage [-1]
        road0 [-1]
        road1 [-1]
        road2 [-1]
        road3 [-1]
        road4 [-1]
        - [-1]
        road [-1]
    )
    (
        :init [39]
        (
            same_line [-1]
            junction0-0 [-1]
            junction0-1 [-1]
        )
        (
            same_line [-1]
            junction0-1 [-1]
            junction0-0 [-1]
        )
        (
            same_line [-1]
            junction0-1 [-1]
            junction0-2 [-1]
        )
        (
            same_line [-1]
            junction0-2 [-1]
            junction0-1 [-1]
        )
        (
            same_line [-1]
            junction1-0 [-1]
            junction1-1 [-1]
        )
        (
            same_line [-1]
            junction1-1 [-1]
            junction1-0 [-1]
        )
        (
            same_line [-1]
            junction1-1 [-1]
            junction1-2 [-1]
        )
        (
            same_line [-1]
            junction1-2 [-1]
            junction1-1 [-1]
        )
        (
            same_line [-1]
            junction2-0 [-1]
            junction2-1 [-1]
        )
        (
            same_line [-1]
            junction2-1 [-1]
            junction2-0 [-1]
        )
        (
            same_line [-1]
            junction2-1 [-1]
            junction2-2 [-1]
        )
        (
            same_line [-1]
            junction2-2 [-1]
            junction2-1 [-1]
        )
        (
            same_line [-1]
            junction0-0 [-1]
            junction1-0 [-1]
        )
        (
            same_line [-1]
            junction1-0 [-1]
            junction0-0 [-1]
        )
        (
            same_line [-1]
            junction1-0 [-1]
            junction2-0 [-1]
        )
        (
            same_line [-1]
            junction2-0 [-1]
            junction1-0 [-1]
        )
        (
            same_line [-1]
            junction0-1 [-1]
            junction1-1 [-1]
        )
        (
            same_line [-1]
            junction1-1 [-1]
            junction0-1 [-1]
        )
        (
            same_line [-1]
            junction1-1 [-1]
            junction2-1 [-1]
        )
        (
            same_line [-1]
            junction2-1 [-1]
            junction1-1 [-1]
        )
        (
            same_line [-1]
            junction0-2 [-1]
            junction1-2 [-1]
        )
        (
            same_line [-1]
            junction1-2 [-1]
            junction0-2 [-1]
        )
        (
            same_line [-1]
            junction1-2 [-1]
            junction2-2 [-1]
        )
        (
            same_line [-1]
            junction2-2 [-1]
            junction1-2 [-1]
        )
        (
            diagonal [-1]
            junction0-0 [-1]
            junction1-1 [-1]
        )
        (
            diagonal [-1]
            junction1-1 [-1]
            junction0-0 [-1]
        )
        (
            diagonal [-1]
            junction0-1 [-1]
            junction1-0 [-1]
        )
        (
            diagonal [-1]
            junction1-0 [-1]
            junction0-1 [-1]
        )
        (
            diagonal [-1]
            junction0-1 [-1]
            junction1-2 [-1]
        )
        (
            diagonal [-1]
            junction1-2 [-1]
            junction0-1 [-1]
        )
        (
            diagonal [-1]
            junction0-2 [-1]
            junction1-1 [-1]
        )
        (
            diagonal [-1]
            junction1-1 [-1]
            junction0-2 [-1]
        )
        (
            diagonal [-1]
            junction1-0 [-1]
            junction2-1 [-1]
        )
        (
            diagonal [-1]
            junction2-1 [-1]
            junction1-0 [-1]
        )
        (
            diagonal [-1]
            junction1-1 [-1]
            junction2-0 [-1]
        )
        (
            diagonal [-1]
            junction2-0 [-1]
            junction1-1 [-1]
        )
        (
            diagonal [-1]
            junction1-1 [-1]
            junction2-2 [-1]
        )
        (
            diagonal [-1]
            junction2-2 [-1]
            junction1-1 [-1]
        )
        (
            diagonal [-1]
            junction1-2 [-1]
            junction2-1 [-1]
        )
        (
            diagonal [-1]
            junction2-1 [-1]
            junction1-2 [-1]
        )
        (
            clear [-1]
            junction0-0 [-1]
        )
        (
            clear [-1]
            junction0-1 [-1]
        )
        (
            clear [-1]
            junction0-2 [-1]
        )
        (
            clear [-1]
            junction1-0 [-1]
        )
        (
            clear [-1]
            junction1-1 [-1]
        )
        (
            clear [-1]
            junction1-2 [-1]
        )
        (
            clear [-1]
            junction2-0 [-1]
        )
        (
            clear [-1]
            junction2-1 [-1]
        )
        (
            clear [-1]
            junction2-2 [-1]
        )
        (
            at_garage [-1]
            garage0 [-1]
            junction0-0 [-1]
        )
        (
            at_garage [-1]
            garage1 [-1]
            junction0-0 [-1]
        )
        (
            starting [-1]
            car0 [-1]
            garage0 [-1]
        )
        (
            starting [-1]
            car1 [-1]
            garage1 [-1]
        )
        (
            = [-1]
            (
                total-cost [-1]
            )
            0 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                arrived [-1]
                car0 [-1]
                junction2-0 [-1]
            )
            (
                arrived [-1]
                car1 [-1]
                junction2-1 [-1]
            )
        )
    )
    (
        :metric [41]
        minimize [42]
        (
            total-cost [-1]
        )
    )
)
---- pddl/CityCar-p3-2-2-0-1.pddl END ----
---- pddl/depot-domain.pddl ----
(
    define [1]
    (
        domain [2]
        depot [-1]
    )
    (
        :predicates [6]
        (
            at [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            on [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            in [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            lifting [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            available [-1]
            ?x [-1]
        )
        (
            clear [-1]
            ?x [-1]
        )
        (
            place [-1]
            ?x [-1]
        )
        (
            locatable [-1]
            ?x [-1]
        )
        (
            depot [-1]
            ?x [-1]
        )
        (
            distributor [-1]
            ?x [-1]
        )
        (
            truck [-1]
            ?x [-1]
        )
        (
            hoist [-1]
            ?x [-1]
        )
        (
            surface [-1]
            ?x [-1]
        )
        (
            pallet [-1]
            ?x [-1]
        )
        (
            crate [-1]
            ?x [-1]
        )
    )
    (
        :action [7]
        drive [-1]
        :parameters [8]
        (
            ?x [-1]
            ?y [-1]
            ?z [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                truck [-1]
                ?x [-1]
            )
            (
                place [-1]
                ?y [-1]
            )
            (
                place [-1]
                ?z [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?y [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                at [-1]
                ?x [-1]
                ?z [-1]
            )
            (
                not [47]
                (
                    at [-1]
                    ?x [-1]
                    ?y [-1]
                )
            )
        )
    )
    (
        :action [7]
        lift [-1]
        :parameters [8]
        (
            ?x [-1]
            ?y [-1]
            ?z [-1]
            ?p [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                hoist [-1]
                ?x [-1]
            )
            (
                crate [-1]
                ?y [-1]
            )
            (
                surface [-1]
                ?z [-1]
            )
            (
                place [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                available [-1]
                ?x [-1]
            )
            (
                at [-1]
                ?y [-1]
                ?p [-1]
            )
            (
                on [-1]
                ?y [-1]
                ?z [-1]
            )
            (
                clear [-1]
                ?y [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                lifting [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                clear [-1]
                ?z [-1]
            )
            (
                not [47]
                (
                    at [-1]
                    ?y [-1]
                    ?p [-1]
                )
            )
            (
                not [47]
                (
                    clear [-1]
                    ?y [-1]
                )
            )
            (
                not [47]
                (
                    available [-1]
                    ?x [-1]
                )
            )
            (
                not [47]
                (
                    on [-1]
                    ?y [-1]
                    ?z [-1]
                )
            )
        )
    )
    (
        :action [7]
        drop [-1]
        :parameters [8]
        (
            ?x [-1]
            ?y [-1]
            ?z [-1]
            ?p [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                hoist [-1]
                ?x [-1]
            )
            (
                crate [-1]
                ?y [-1]
            )
            (
                surface [-1]
                ?z [-1]
            )
            (
                place [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?z [-1]
                ?p [-1]
            )
            (
                clear [-1]
                ?z [-1]
            )
            (
                lifting [-1]
                ?x [-1]
                ?y [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                available [-1]
                ?x [-1]
            )
            (
                at [-1]
                ?y [-1]
                ?p [-1]
            )
            (
                clear [-1]
                ?y [-1]
            )
            (
                on [-1]
                ?y [-1]
                ?z [-1]
            )
            (
                not [47]
                (
                    lifting [-1]
                    ?x [-1]
                    ?y [-1]
                )
            )
            (
                not [47]
                (
                    clear [-1]
                    ?z [-1]
                )
            )
        )
    )
    (
        :action [7]
        load [-1]
        :parameters [8]
        (
            ?x [-1]
            ?y [-1]
            ?z [-1]
            ?p [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                hoist [-1]
                ?x [-1]
            )
            (
                crate [-1]
                ?y [-1]
            )
            (
                truck [-1]
                ?z [-1]
            )
            (
                place [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?z [-1]
                ?p [-1]
            )
            (
                lifting [-1]
                ?x [-1]
                ?y [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                in [-1]
                ?y [-1]
                ?z [-1]
            )
            (
                available [-1]
                ?x [-1]
            )
            (
                not [47]
                (
                    lifting [-1]
                    ?x [-1]
                    ?y [-1]
                )
            )
        )
    )
    (
        :action [7]
        unload [-1]
        :parameters [8]
        (
            ?x [-1]
            ?y [-1]
            ?z [-1]
            ?p [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                hoist [-1]
                ?x [-1]
            )
            (
                crate [-1]
                ?y [-1]
            )
            (
                truck [-1]
                ?z [-1]
            )
            (
                place [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?z [-1]
                ?p [-1]
            )
            (
                available [-1]
                ?x [-1]
            )
            (
                in [-1]
                ?y [-1]
                ?z [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                lifting [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                not [47]
                (
                    in [-1]
                    ?y [-1]
                    ?z [-1]
                )
            )
            (
                not [47]
                (
                    available [-1]
                    ?x [-1]
                )
            )
        )
    )
)
---- pddl/depot-domain.pddl END ----
---- pddl/depot-pfile1.pddl ----
(
    define [1]
    (
        problem [37]
        depotprob1818 [-1]
    )
    (
        :domain [2]
        Depot [-1]
    )
    (
        :objects [38]
        depot0 [-1]
        distributor0 [-1]
        distributor1 [-1]
        truck0 [-1]
        truck1 [-1]
        pallet0 [-1]
        pallet1 [-1]
        pallet2 [-1]
        crate0 [-1]
        crate1 [-1]
        hoist0 [-1]
        hoist1 [-1]
        hoist2 [-1]
    )
    (
        :init [39]
        (
            pallet [-1]
            pallet0 [-1]
        )
        (
            surface [-1]
            pallet0 [-1]
        )
        (
            at [-1]
            pallet0 [-1]
            depot0 [-1]
        )
        (
            clear [-1]
            crate1 [-1]
        )
        (
            pallet [-1]
            pallet1 [-1]
        )
        (
            surface [-1]
            pallet1 [-1]
        )
        (
            at [-1]
            pallet1 [-1]
            distributor0 [-1]
        )
        (
            clear [-1]
            crate0 [-1]
        )
        (
            pallet [-1]
            pallet2 [-1]
        )
        (
            surface [-1]
            pallet2 [-1]
        )
        (
            at [-1]
            pallet2 [-1]
            distributor1 [-1]
        )
        (
            clear [-1]
            pallet2 [-1]
        )
        (
            truck [-1]
            truck0 [-1]
        )
        (
            at [-1]
            truck0 [-1]
            distributor1 [-1]
        )
        (
            truck [-1]
            truck1 [-1]
        )
        (
            at [-1]
            truck1 [-1]
            depot0 [-1]
        )
        (
            hoist [-1]
            hoist0 [-1]
        )
        (
            at [-1]
            hoist0 [-1]
            depot0 [-1]
        )
        (
            available [-1]
            hoist0 [-1]
        )
        (
            hoist [-1]
            hoist1 [-1]
        )
        (
            at [-1]
            hoist1 [-1]
            distributor0 [-1]
        )
        (
            available [-1]
            hoist1 [-1]
        )
        (
            hoist [-1]
            hoist2 [-1]
        )
        (
            at [-1]
            hoist2 [-1]
            distributor1 [-1]
        )
        (
            available [-1]
            hoist2 [-1]
        )
        (
            crate [-1]
            crate0 [-1]
        )
        (
            surface [-1]
            crate0 [-1]
        )
        (
            at [-1]
            crate0 [-1]
            distributor0 [-1]
        )
        (
            on [-1]
            crate0 [-1]
            pallet1 [-1]
        )
        (
            crate [-1]
            crate1 [-1]
        )
        (
            surface [-1]
            crate1 [-1]
        )
        (
            at [-1]
            crate1 [-1]
            depot0 [-1]
        )
        (
            on [-1]
            crate1 [-1]
            pallet0 [-1]
        )
        (
            place [-1]
            depot0 [-1]
        )
        (
            place [-1]
            distributor0 [-1]
        )
        (
            place [-1]
            distributor1 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                on [-1]
                crate0 [-1]
                pallet2 [-1]
            )
            (
                on [-1]
                crate1 [-1]
                pallet1 [-1]
            )
        )
    )
)
---- pddl/depot-pfile1.pddl END ----
---- pddl/depot-pfile2.pddl ----
(
    define [1]
    (
        problem [37]
        depotprob7512 [-1]
    )
    (
        :domain [2]
        Depot [-1]
    )
    (
        :objects [38]
        depot0 [-1]
        distributor0 [-1]
        distributor1 [-1]
        truck0 [-1]
        truck1 [-1]
        pallet0 [-1]
        pallet1 [-1]
        pallet2 [-1]
        crate0 [-1]
        crate1 [-1]
        crate2 [-1]
        crate3 [-1]
        hoist0 [-1]
        hoist1 [-1]
        hoist2 [-1]
    )
    (
        :init [39]
        (
            pallet [-1]
            pallet0 [-1]
        )
        (
            surface [-1]
            pallet0 [-1]
        )
        (
            at [-1]
            pallet0 [-1]
            depot0 [-1]
        )
        (
            clear [-1]
            crate0 [-1]
        )
        (
            pallet [-1]
            pallet1 [-1]
        )
        (
            surface [-1]
            pallet1 [-1]
        )
        (
            at [-1]
            pallet1 [-1]
            distributor0 [-1]
        )
        (
            clear [-1]
            crate3 [-1]
        )
        (
            pallet [-1]
            pallet2 [-1]
        )
        (
            surface [-1]
            pallet2 [-1]
        )
        (
            at [-1]
            pallet2 [-1]
            distributor1 [-1]
        )
        (
            clear [-1]
            crate2 [-1]
        )
        (
            truck [-1]
            truck0 [-1]
        )
        (
            at [-1]
            truck0 [-1]
            depot0 [-1]
        )
        (
            truck [-1]
            truck1 [-1]
        )
        (
            at [-1]
            truck1 [-1]
            depot0 [-1]
        )
        (
            hoist [-1]
            hoist0 [-1]
        )
        (
            at [-1]
            hoist0 [-1]
            depot0 [-1]
        )
        (
            available [-1]
            hoist0 [-1]
        )
        (
            hoist [-1]
            hoist1 [-1]
        )
        (
            at [-1]
            hoist1 [-1]
            distributor0 [-1]
        )
        (
            available [-1]
            hoist1 [-1]
        )
        (
            hoist [-1]
            hoist2 [-1]
        )
        (
            at [-1]
            hoist2 [-1]
            distributor1 [-1]
        )
        (
            available [-1]
            hoist2 [-1]
        )
        (
            crate [-1]
            crate0 [-1]
        )
        (
            surface [-1]
            crate0 [-1]
        )
        (
            at [-1]
            crate0 [-1]
            depot0 [-1]
        )
        (
            on [-1]
            crate0 [-1]
            pallet0 [-1]
        )
        (
            crate [-1]
            crate1 [-1]
        )
        (
            surface [-1]
            crate1 [-1]
        )
        (
            at [-1]
            crate1 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate1 [-1]
            pallet2 [-1]
        )
        (
            crate [-1]
            crate2 [-1]
        )
        (
            surface [-1]
            crate2 [-1]
        )
        (
            at [-1]
            crate2 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate2 [-1]
            crate1 [-1]
        )
        (
            crate [-1]
            crate3 [-1]
        )
        (
            surface [-1]
            crate3 [-1]
        )
        (
            at [-1]
            crate3 [-1]
            distributor0 [-1]
        )
        (
            on [-1]
            crate3 [-1]
            pallet1 [-1]
        )
        (
            place [-1]
            depot0 [-1]
        )
        (
            place [-1]
            distributor0 [-1]
        )
        (
            place [-1]
            distributor1 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                on [-1]
                crate0 [-1]
                pallet2 [-1]
            )
            (
                on [-1]
                crate1 [-1]
                crate3 [-1]
            )
            (
                on [-1]
                crate2 [-1]
                pallet0 [-1]
            )
            (
                on [-1]
                crate3 [-1]
                pallet1 [-1]
            )
        )
    )
)
---- pddl/depot-pfile2.pddl END ----
---- pddl/depot-pfile5.pddl ----
(
    define [1]
    (
        problem [37]
        depotprob1212 [-1]
    )
    (
        :domain [2]
        Depot [-1]
    )
    (
        :objects [38]
        depot0 [-1]
        distributor0 [-1]
        distributor1 [-1]
        truck0 [-1]
        truck1 [-1]
        pallet0 [-1]
        pallet1 [-1]
        pallet2 [-1]
        crate0 [-1]
        crate1 [-1]
        crate2 [-1]
        crate3 [-1]
        crate4 [-1]
        crate5 [-1]
        crate6 [-1]
        crate7 [-1]
        crate8 [-1]
        crate9 [-1]
        hoist0 [-1]
        hoist1 [-1]
        hoist2 [-1]
    )
    (
        :init [39]
        (
            pallet [-1]
            pallet0 [-1]
        )
        (
            surface [-1]
            pallet0 [-1]
        )
        (
            at [-1]
            pallet0 [-1]
            depot0 [-1]
        )
        (
            clear [-1]
            crate4 [-1]
        )
        (
            pallet [-1]
            pallet1 [-1]
        )
        (
            surface [-1]
            pallet1 [-1]
        )
        (
            at [-1]
            pallet1 [-1]
            distributor0 [-1]
        )
        (
            clear [-1]
            crate8 [-1]
        )
        (
            pallet [-1]
            pallet2 [-1]
        )
        (
            surface [-1]
            pallet2 [-1]
        )
        (
            at [-1]
            pallet2 [-1]
            distributor1 [-1]
        )
        (
            clear [-1]
            crate9 [-1]
        )
        (
            truck [-1]
            truck0 [-1]
        )
        (
            at [-1]
            truck0 [-1]
            depot0 [-1]
        )
        (
            truck [-1]
            truck1 [-1]
        )
        (
            at [-1]
            truck1 [-1]
            distributor0 [-1]
        )
        (
            hoist [-1]
            hoist0 [-1]
        )
        (
            at [-1]
            hoist0 [-1]
            depot0 [-1]
        )
        (
            available [-1]
            hoist0 [-1]
        )
        (
            hoist [-1]
            hoist1 [-1]
        )
        (
            at [-1]
            hoist1 [-1]
            distributor0 [-1]
        )
        (
            available [-1]
            hoist1 [-1]
        )
        (
            hoist [-1]
            hoist2 [-1]
        )
        (
            at [-1]
            hoist2 [-1]
            distributor1 [-1]
        )
        (
            available [-1]
            hoist2 [-1]
        )
        (
            crate [-1]
            crate0 [-1]
        )
        (
            surface [-1]
            crate0 [-1]
        )
        (
            at [-1]
            crate0 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate0 [-1]
            pallet2 [-1]
        )
        (
            crate [-1]
            crate1 [-1]
        )
        (
            surface [-1]
            crate1 [-1]
        )
        (
            at [-1]
            crate1 [-1]
            depot0 [-1]
        )
        (
            on [-1]
            crate1 [-1]
            pallet0 [-1]
        )
        (
            crate [-1]
            crate2 [-1]
        )
        (
            surface [-1]
            crate2 [-1]
        )
        (
            at [-1]
            crate2 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate2 [-1]
            crate0 [-1]
        )
        (
            crate [-1]
            crate3 [-1]
        )
        (
            surface [-1]
            crate3 [-1]
        )
        (
            at [-1]
            crate3 [-1]
            depot0 [-1]
        )
        (
            on [-1]
            crate3 [-1]
            crate1 [-1]
        )
        (
            crate [-1]
            crate4 [-1]
        )
        (
            surface [-1]
            crate4 [-1]
        )
        (
            at [-1]
            crate4 [-1]
            depot0 [-1]
        )
        (
            on [-1]
            crate4 [-1]
            crate3 [-1]
        )
        (
            crate [-1]
            crate5 [-1]
        )
        (
            surface [-1]
            crate5 [-1]
        )
        (
            at [-1]
            crate5 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate5 [-1]
            crate2 [-1]
        )
        (
            crate [-1]
            crate6 [-1]
        )
        (
            surface [-1]
            crate6 [-1]
        )
        (
            at [-1]
            crate6 [-1]
            distributor0 [-1]
        )
        (
            on [-1]
            crate6 [-1]
            pallet1 [-1]
        )
        (
            crate [-1]
            crate7 [-1]
        )
        (
            surface [-1]
            crate7 [-1]
        )
        (
            at [-1]
            crate7 [-1]
            distributor0 [-1]
        )
        (
            on [-1]
            crate7 [-1]
            crate6 [-1]
        )
        (
            crate [-1]
            crate8 [-1]
        )
        (
            surface [-1]
            crate8 [-1]
        )
        (
            at [-1]
            crate8 [-1]
            distributor0 [-1]
        )
        (
            on [-1]
            crate8 [-1]
            crate7 [-1]
        )
        (
            crate [-1]
            crate9 [-1]
        )
        (
            surface [-1]
            crate9 [-1]
        )
        (
            at [-1]
            crate9 [-1]
            distributor1 [-1]
        )
        (
            on [-1]
            crate9 [-1]
            crate5 [-1]
        )
        (
            place [-1]
            depot0 [-1]
        )
        (
            place [-1]
            distributor0 [-1]
        )
        (
            place [-1]
            distributor1 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                on [-1]
                crate0 [-1]
                crate5 [-1]
            )
            (
                on [-1]
                crate1 [-1]
                pallet1 [-1]
            )
            (
                on [-1]
                crate2 [-1]
                crate0 [-1]
            )
            (
                on [-1]
                crate3 [-1]
                pallet2 [-1]
            )
            (
                on [-1]
                crate4 [-1]
                crate6 [-1]
            )
            (
                on [-1]
                crate5 [-1]
                crate4 [-1]
            )
            (
                on [-1]
                crate6 [-1]
                crate9 [-1]
            )
            (
                on [-1]
                crate7 [-1]
                crate1 [-1]
            )
            (
                on [-1]
                crate8 [-1]
                crate3 [-1]
            )
            (
                on [-1]
                crate9 [-1]
                pallet0 [-1]
            )
        )
    )
)
---- pddl/depot-pfile5.pddl END ----
---- pddl/driverlog-domain.pddl ----
(
    define [1]
    (
        domain [2]
        driverlog [-1]
    )
    (
        :requirements [3]
        :strips [11]
    )
    (
        :predicates [6]
        (
            OBJ [-1]
            ?obj [-1]
        )
        (
            TRUCK [-1]
            ?truck [-1]
        )
        (
            LOCATION [-1]
            ?loc [-1]
        )
        (
            driver [-1]
            ?d [-1]
        )
        (
            at [-1]
            ?obj [-1]
            ?loc [-1]
        )
        (
            in [-1]
            ?obj1 [-1]
            ?obj [-1]
        )
        (
            driving [-1]
            ?d [-1]
            ?v [-1]
        )
        (
            link [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            path [-1]
            ?x [-1]
            ?y [-1]
        )
        (
            empty [-1]
            ?v [-1]
        )
    )
    (
        :action [7]
        LOAD-TRUCK [-1]
        :parameters [8]
        (
            ?obj [-1]
            ?truck [-1]
            ?driver [-1]
            ?loc [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                OBJ [-1]
                ?obj [-1]
            )
            (
                TRUCK [-1]
                ?truck [-1]
            )
            (
                LOCATION [-1]
                ?loc [-1]
            )
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                at [-1]
                ?truck [-1]
                ?loc [-1]
            )
            (
                at [-1]
                ?obj [-1]
                ?loc [-1]
            )
            (
                driving [-1]
                ?driver [-1]
                ?truck [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    at [-1]
                    ?obj [-1]
                    ?loc [-1]
                )
            )
            (
                in [-1]
                ?obj [-1]
                ?truck [-1]
            )
        )
    )
    (
        :action [7]
        UNLOAD-TRUCK [-1]
        :parameters [8]
        (
            ?obj [-1]
            ?truck [-1]
            ?driver [-1]
            ?loc [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                OBJ [-1]
                ?obj [-1]
            )
            (
                TRUCK [-1]
                ?truck [-1]
            )
            (
                LOCATION [-1]
                ?loc [-1]
            )
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                at [-1]
                ?truck [-1]
                ?loc [-1]
            )
            (
                in [-1]
                ?obj [-1]
                ?truck [-1]
            )
            (
                driving [-1]
                ?driver [-1]
                ?truck [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    in [-1]
                    ?obj [-1]
                    ?truck [-1]
                )
            )
            (
                at [-1]
                ?obj [-1]
                ?loc [-1]
            )
        )
    )
    (
        :action [7]
        BOARD-TRUCK [-1]
        :parameters [8]
        (
            ?driver [-1]
            ?truck [-1]
            ?loc [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                TRUCK [-1]
                ?truck [-1]
            )
            (
                LOCATION [-1]
                ?loc [-1]
            )
            (
                at [-1]
                ?truck [-1]
                ?loc [-1]
            )
            (
                at [-1]
                ?driver [-1]
                ?loc [-1]
            )
            (
                empty [-1]
                ?truck [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    at [-1]
                    ?driver [-1]
                    ?loc [-1]
                )
            )
            (
                driving [-1]
                ?driver [-1]
                ?truck [-1]
            )
            (
                not [47]
                (
                    empty [-1]
                    ?truck [-1]
                )
            )
        )
    )
    (
        :action [7]
        DISEMBARK-TRUCK [-1]
        :parameters [8]
        (
            ?driver [-1]
            ?truck [-1]
            ?loc [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                TRUCK [-1]
                ?truck [-1]
            )
            (
                LOCATION [-1]
                ?loc [-1]
            )
            (
                at [-1]
                ?truck [-1]
                ?loc [-1]
            )
            (
                driving [-1]
                ?driver [-1]
                ?truck [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    driving [-1]
                    ?driver [-1]
                    ?truck [-1]
                )
            )
            (
                at [-1]
                ?driver [-1]
                ?loc [-1]
            )
            (
                empty [-1]
                ?truck [-1]
            )
        )
    )
    (
        :action [7]
        DRIVE-TRUCK [-1]
        :parameters [8]
        (
            ?truck [-1]
            ?loc-from [-1]
            ?loc-to [-1]
            ?driver [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                TRUCK [-1]
                ?truck [-1]
            )
            (
                LOCATION [-1]
                ?loc-from [-1]
            )
            (
                LOCATION [-1]
                ?loc-to [-1]
            )
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                at [-1]
                ?truck [-1]
                ?loc-from [-1]
            )
            (
                driving [-1]
                ?driver [-1]
                ?truck [-1]
            )
            (
                link [-1]
                ?loc-from [-1]
                ?loc-to [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    at [-1]
                    ?truck [-1]
                    ?loc-from [-1]
                )
            )
            (
                at [-1]
                ?truck [-1]
                ?loc-to [-1]
            )
        )
    )
    (
        :action [7]
        WALK [-1]
        :parameters [8]
        (
            ?driver [-1]
            ?loc-from [-1]
            ?loc-to [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                DRIVER [-1]
                ?driver [-1]
            )
            (
                LOCATION [-1]
                ?loc-from [-1]
            )
            (
                LOCATION [-1]
                ?loc-to [-1]
            )
            (
                at [-1]
                ?driver [-1]
                ?loc-from [-1]
            )
            (
                path [-1]
                ?loc-from [-1]
                ?loc-to [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    at [-1]
                    ?driver [-1]
                    ?loc-from [-1]
                )
            )
            (
                at [-1]
                ?driver [-1]
                ?loc-to [-1]
            )
        )
    )
)
---- pddl/driverlog-domain.pddl END ----
---- pddl/driverlog-pfile1.pddl ----
(
    define [1]
    (
        problem [37]
        DLOG-2-2-2 [-1]
    )
    (
        :domain [2]
        driverlog [-1]
    )
    (
        :objects [38]
        driver1 [-1]
        driver2 [-1]
        truck1 [-1]
        truck2 [-1]
        package1 [-1]
        package2 [-1]
        s0 [-1]
        s1 [-1]
        s2 [-1]
        p1-0 [-1]
        p1-2 [-1]
    )
    (
        :init [39]
        (
            at [-1]
            driver1 [-1]
            s2 [-1]
        )
        (
            DRIVER [-1]
            driver1 [-1]
        )
        (
            at [-1]
            driver2 [-1]
            s2 [-1]
        )
        (
            DRIVER [-1]
            driver2 [-1]
        )
        (
            at [-1]
            truck1 [-1]
            s0 [-1]
        )
        (
            empty [-1]
            truck1 [-1]
        )
        (
            TRUCK [-1]
            truck1 [-1]
        )
        (
            at [-1]
            truck2 [-1]
            s0 [-1]
        )
        (
            empty [-1]
            truck2 [-1]
        )
        (
            TRUCK [-1]
            truck2 [-1]
        )
        (
            at [-1]
            package1 [-1]
            s0 [-1]
        )
        (
            OBJ [-1]
            package1 [-1]
        )
        (
            at [-1]
            package2 [-1]
            s0 [-1]
        )
        (
            OBJ [-1]
            package2 [-1]
        )
        (
            LOCATION [-1]
            s0 [-1]
        )
        (
            LOCATION [-1]
            s1 [-1]
        )
        (
            LOCATION [-1]
            s2 [-1]
        )
        (
            LOCATION [-1]
            p1-0 [-1]
        )
        (
            LOCATION [-1]
            p1-2 [-1]
        )
        (
            path [-1]
            s1 [-1]
            p1-0 [-1]
        )
        (
            path [-1]
            p1-0 [-1]
            s1 [-1]
        )
        (
            path [-1]
            s0 [-1]
            p1-0 [-1]
        )
        (
            path [-1]
            p1-0 [-1]
            s0 [-1]
        )
        (
            path [-1]
            s1 [-1]
            p1-2 [-1]
        )
        (
            path [-1]
            p1-2 [-1]
            s1 [-1]
        )
        (
            path [-1]
            s2 [-1]
            p1-2 [-1]
        )
        (
            path [-1]
            p1-2 [-1]
            s2 [-1]
        )
        (
            link [-1]
            s0 [-1]
            s1 [-1]
        )
        (
            link [-1]
            s1 [-1]
            s0 [-1]
        )
        (
            link [-1]
            s0 [-1]
            s2 [-1]
        )
        (
            link [-1]
            s2 [-1]
            s0 [-1]
        )
        (
            link [-1]
            s2 [-1]
            s1 [-1]
        )
        (
            link [-1]
            s1 [-1]
            s2 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                at [-1]
                driver1 [-1]
                s1 [-1]
            )
            (
                at [-1]
                truck1 [-1]
                s1 [-1]
            )
            (
                at [-1]
                package1 [-1]
                s0 [-1]
            )
            (
                at [-1]
                package2 [-1]
                s0 [-1]
            )
        )
    )
)
---- pddl/driverlog-pfile1.pddl END ----
---- pddl/driverlog-pfile3.pddl ----
(
    define [1]
    (
        problem [37]
        DLOG-2-2-4 [-1]
    )
    (
        :domain [2]
        driverlog [-1]
    )
    (
        :objects [38]
        driver1 [-1]
        driver2 [-1]
        truck1 [-1]
        truck2 [-1]
        package1 [-1]
        package2 [-1]
        package3 [-1]
        package4 [-1]
        s0 [-1]
        s1 [-1]
        s2 [-1]
        p0-1 [-1]
        p2-0 [-1]
        p2-1 [-1]
    )
    (
        :init [39]
        (
            at [-1]
            driver1 [-1]
            s1 [-1]
        )
        (
            DRIVER [-1]
            driver1 [-1]
        )
        (
            at [-1]
            driver2 [-1]
            s0 [-1]
        )
        (
            DRIVER [-1]
            driver2 [-1]
        )
        (
            at [-1]
            truck1 [-1]
            s1 [-1]
        )
        (
            empty [-1]
            truck1 [-1]
        )
        (
            TRUCK [-1]
            truck1 [-1]
        )
        (
            at [-1]
            truck2 [-1]
            s2 [-1]
        )
        (
            empty [-1]
            truck2 [-1]
        )
        (
            TRUCK [-1]
            truck2 [-1]
        )
        (
            at [-1]
            package1 [-1]
            s0 [-1]
        )
        (
            OBJ [-1]
            package1 [-1]
        )
        (
            at [-1]
            package2 [-1]
            s0 [-1]
        )
        (
            OBJ [-1]
            package2 [-1]
        )
        (
            at [-1]
            package3 [-1]
            s1 [-1]
        )
        (
            OBJ [-1]
            package3 [-1]
        )
        (
            at [-1]
            package4 [-1]
            s1 [-1]
        )
        (
            OBJ [-1]
            package4 [-1]
        )
        (
            LOCATION [-1]
            s0 [-1]
        )
        (
            LOCATION [-1]
            s1 [-1]
        )
        (
            LOCATION [-1]
            s2 [-1]
        )
        (
            LOCATION [-1]
            p0-1 [-1]
        )
        (
            LOCATION [-1]
            p2-0 [-1]
        )
        (
            LOCATION [-1]
            p2-1 [-1]
        )
        (
            path [-1]
            s0 [-1]
            p0-1 [-1]
        )
        (
            path [-1]
            p0-1 [-1]
            s0 [-1]
        )
        (
            path [-1]
            s1 [-1]
            p0-1 [-1]
        )
        (
            path [-1]
            p0-1 [-1]
            s1 [-1]
        )
        (
            path [-1]
            s2 [-1]
            p2-0 [-1]
        )
        (
            path [-1]
            p2-0 [-1]
            s2 [-1]
        )
        (
            path [-1]
            s0 [-1]
            p2-0 [-1]
        )
        (
            path [-1]
            p2-0 [-1]
            s0 [-1]
        )
        (
            path [-1]
            s2 [-1]
            p2-1 [-1]
        )
        (
            path [-1]
            p2-1 [-1]
            s2 [-1]
        )
        (
            path [-1]
            s1 [-1]
            p2-1 [-1]
        )
        (
            path [-1]
            p2-1 [-1]
            s1 [-1]
        )
        (
            link [-1]
            s1 [-1]
            s0 [-1]
        )
        (
            link [-1]
            s0 [-1]
            s1 [-1]
        )
        (
            link [-1]
            s1 [-1]
            s2 [-1]
        )
        (
            link [-1]
            s2 [-1]
            s1 [-1]
        )
        (
            link [-1]
            s2 [-1]
            s0 [-1]
        )
        (
            link [-1]
            s0 [-1]
            s2 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                at [-1]
                driver2 [-1]
                s2 [-1]
            )
            (
                at [-1]
                truck1 [-1]
                s1 [-1]
            )
            (
                at [-1]
                truck2 [-1]
                s2 [-1]
            )
            (
                at [-1]
                package1 [-1]
                s1 [-1]
            )
            (
                at [-1]
                package2 [-1]
                s1 [-1]
            )
            (
                at [-1]
                package3 [-1]
                s2 [-1]
            )
        )
    )
)
---- pddl/driverlog-pfile3.pddl END ----
---- pddl/openstacks-p03-domain.pddl ----
(
    define [1]
    (
        domain [2]
        openstacks-sequencedstrips-nonADL-nonNegated [-1]
    )
    (
        :requirements [3]
        :typing [12]
        :action-costs [28]
    )
    (
        :types [4]
        order [-1]
        product [-1]
        count [-1]
        manager-agent [-1]
        manufacturer-agent [-1]
    )
    (
        :constants [5]
        p1 [-1]
        p2 [-1]
        p3 [-1]
        p4 [-1]
        p5 [-1]
        - [-1]
        product [-1]
        o1 [-1]
        o2 [-1]
        o3 [-1]
        o4 [-1]
        o5 [-1]
        - [-1]
        order [-1]
        manager [-1]
        - [-1]
        manager-agent [-1]
        manufacturer [-1]
        - [-1]
        manufacturer-agent [-1]
    )
    (
        :predicates [6]
        (
            includes [-1]
            ?o [-1]
            - [-1]
            order [-1]
            ?p [-1]
            - [-1]
            product [-1]
        )
        (
            waiting [-1]
            ?o [-1]
            - [-1]
            order [-1]
        )
        (
            started [-1]
            ?o [-1]
            - [-1]
            order [-1]
        )
        (
            shipped [-1]
            ?o [-1]
            - [-1]
            order [-1]
        )
        (
            made [-1]
            ?p [-1]
            - [-1]
            product [-1]
        )
        (
            not-made [-1]
            ?p [-1]
            - [-1]
            product [-1]
        )
        (
            stacks-avail [-1]
            ?s [-1]
            - [-1]
            count [-1]
        )
        (
            next-count [-1]
            ?s [-1]
            ?ns [-1]
            - [-1]
            count [-1]
        )
    )
    (
        :functions [35]
        (
            total-cost [-1]
        )
        - [-1]
        number [36]
    )
    (
        :action [7]
        open-new-stack [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
            ?open [-1]
            ?new-open [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                stacks-avail [-1]
                ?open [-1]
            )
            (
                next-count [-1]
                ?open [-1]
                ?new-open [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?open [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-open [-1]
            )
            (
                increase [44]
                (
                    total-cost [-1]
                )
                1 [-1]
            )
        )
    )
    (
        :action [7]
        start-order [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?o [-1]
            - [-1]
            order [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                waiting [-1]
                ?o [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?new-avail [-1]
                ?avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    waiting [-1]
                    ?o [-1]
                )
            )
            (
                started [-1]
                ?o [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
    (
        :action [7]
        make-product-p1 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                not-made [-1]
                p1 [-1]
            )
            (
                started [-1]
                o2 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    not-made [-1]
                    p1 [-1]
                )
            )
            (
                made [-1]
                p1 [-1]
            )
        )
    )
    (
        :action [7]
        make-product-p2 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                not-made [-1]
                p2 [-1]
            )
            (
                started [-1]
                o1 [-1]
            )
            (
                started [-1]
                o2 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    not-made [-1]
                    p2 [-1]
                )
            )
            (
                made [-1]
                p2 [-1]
            )
        )
    )
    (
        :action [7]
        make-product-p3 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                not-made [-1]
                p3 [-1]
            )
            (
                started [-1]
                o3 [-1]
            )
            (
                started [-1]
                o4 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    not-made [-1]
                    p3 [-1]
                )
            )
            (
                made [-1]
                p3 [-1]
            )
        )
    )
    (
        :action [7]
        make-product-p4 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                not-made [-1]
                p4 [-1]
            )
            (
                started [-1]
                o4 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    not-made [-1]
                    p4 [-1]
                )
            )
            (
                made [-1]
                p4 [-1]
            )
        )
    )
    (
        :action [7]
        make-product-p5 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manufacturer-agent [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                not-made [-1]
                p5 [-1]
            )
            (
                started [-1]
                o5 [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    not-made [-1]
                    p5 [-1]
                )
            )
            (
                made [-1]
                p5 [-1]
            )
        )
    )
    (
        :action [7]
        ship-order-o1 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                started [-1]
                o1 [-1]
            )
            (
                made [-1]
                p2 [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?avail [-1]
                ?new-avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    started [-1]
                    o1 [-1]
                )
            )
            (
                shipped [-1]
                o1 [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
    (
        :action [7]
        ship-order-o2 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                started [-1]
                o2 [-1]
            )
            (
                made [-1]
                p1 [-1]
            )
            (
                made [-1]
                p2 [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?avail [-1]
                ?new-avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    started [-1]
                    o2 [-1]
                )
            )
            (
                shipped [-1]
                o2 [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
    (
        :action [7]
        ship-order-o3 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                started [-1]
                o3 [-1]
            )
            (
                made [-1]
                p3 [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?avail [-1]
                ?new-avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    started [-1]
                    o3 [-1]
                )
            )
            (
                shipped [-1]
                o3 [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
    (
        :action [7]
        ship-order-o4 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                started [-1]
                o4 [-1]
            )
            (
                made [-1]
                p3 [-1]
            )
            (
                made [-1]
                p4 [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?avail [-1]
                ?new-avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    started [-1]
                    o4 [-1]
                )
            )
            (
                shipped [-1]
                o4 [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
    (
        :action [7]
        ship-order-o5 [-1]
        :parameters [8]
        (
            ?man [-1]
            - [-1]
            manager-agent [-1]
            ?avail [-1]
            ?new-avail [-1]
            - [-1]
            count [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                started [-1]
                o5 [-1]
            )
            (
                made [-1]
                p5 [-1]
            )
            (
                stacks-avail [-1]
                ?avail [-1]
            )
            (
                next-count [-1]
                ?avail [-1]
                ?new-avail [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    started [-1]
                    o5 [-1]
                )
            )
            (
                shipped [-1]
                o5 [-1]
            )
            (
                not [47]
                (
                    stacks-avail [-1]
                    ?avail [-1]
                )
            )
            (
                stacks-avail [-1]
                ?new-avail [-1]
            )
        )
    )
)
---- pddl/openstacks-p03-domain.pddl END ----
---- pddl/openstacks-p03.pddl ----
(
    define [1]
    (
        problem [37]
        os-sequencedstrips-p5_3 [-1]
    )
    (
        :domain [2]
        openstacks-sequencedstrips-nonADL-nonNegated [-1]
    )
    (
        :objects [38]
        n0 [-1]
        n1 [-1]
        n2 [-1]
        n3 [-1]
        n4 [-1]
        n5 [-1]
        - [-1]
        count [-1]
    )
    (
        :init [39]
        (
            next-count [-1]
            n0 [-1]
            n1 [-1]
        )
        (
            next-count [-1]
            n1 [-1]
            n2 [-1]
        )
        (
            next-count [-1]
            n2 [-1]
            n3 [-1]
        )
        (
            next-count [-1]
            n3 [-1]
            n4 [-1]
        )
        (
            next-count [-1]
            n4 [-1]
            n5 [-1]
        )
        (
            stacks-avail [-1]
            n0 [-1]
        )
        (
            waiting [-1]
            o1 [-1]
        )
        (
            includes [-1]
            o1 [-1]
            p3 [-1]
        )
        (
            waiting [-1]
            o2 [-1]
        )
        (
            includes [-1]
            o2 [-1]
            p4 [-1]
        )
        (
            waiting [-1]
            o3 [-1]
        )
        (
            includes [-1]
            o3 [-1]
            p4 [-1]
        )
        (
            waiting [-1]
            o4 [-1]
        )
        (
            includes [-1]
            o4 [-1]
            p2 [-1]
        )
        (
            includes [-1]
            o4 [-1]
            p5 [-1]
        )
        (
            waiting [-1]
            o5 [-1]
        )
        (
            includes [-1]
            o5 [-1]
            p1 [-1]
        )
        (
            not-made [-1]
            p1 [-1]
        )
        (
            not-made [-1]
            p2 [-1]
        )
        (
            not-made [-1]
            p3 [-1]
        )
        (
            not-made [-1]
            p4 [-1]
        )
        (
            not-made [-1]
            p5 [-1]
        )
        (
            = [-1]
            (
                total-cost [-1]
            )
            0 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                shipped [-1]
                o1 [-1]
            )
            (
                shipped [-1]
                o2 [-1]
            )
            (
                shipped [-1]
                o3 [-1]
            )
            (
                shipped [-1]
                o4 [-1]
            )
            (
                shipped [-1]
                o5 [-1]
            )
        )
    )
    (
        :metric [41]
        minimize [42]
        (
            total-cost [-1]
        )
    )
)
---- pddl/openstacks-p03.pddl END ----
---- pddl/rovers-domain.pddl ----
(
    define [1]
    (
        domain [2]
        Rover [-1]
    )
    (
        :requirements [3]
        :typing [12]
    )
    (
        :types [4]
        rover [-1]
        waypoint [-1]
        store [-1]
        camera [-1]
        mode [-1]
        lander [-1]
        objective [-1]
    )
    (
        :predicates [6]
        (
            at [-1]
            ?x [-1]
            - [-1]
            rover [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        (
            at_lander [-1]
            ?x [-1]
            - [-1]
            lander [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        (
            can_traverse [-1]
            ?r [-1]
            - [-1]
            rover [-1]
            ?x [-1]
            - [-1]
            waypoint [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            equipped_for_imaging [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            empty [-1]
            ?s [-1]
            - [-1]
            store [-1]
        )
        (
            have_rock_analysis [-1]
            ?r [-1]
            - [-1]
            rover [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            have_soil_analysis [-1]
            ?r [-1]
            - [-1]
            rover [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            full [-1]
            ?s [-1]
            - [-1]
            store [-1]
        )
        (
            calibrated [-1]
            ?c [-1]
            - [-1]
            camera [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            supports [-1]
            ?c [-1]
            - [-1]
            camera [-1]
            ?m [-1]
            - [-1]
            mode [-1]
        )
        (
            available [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            visible [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
        )
        (
            have_image [-1]
            ?r [-1]
            - [-1]
            rover [-1]
            ?o [-1]
            - [-1]
            objective [-1]
            ?m [-1]
            - [-1]
            mode [-1]
        )
        (
            communicated_soil_data [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            communicated_rock_data [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            communicated_image_data [-1]
            ?o [-1]
            - [-1]
            objective [-1]
            ?m [-1]
            - [-1]
            mode [-1]
        )
        (
            at_soil_sample [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            at_rock_sample [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            visible_from [-1]
            ?o [-1]
            - [-1]
            objective [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        (
            store_of [-1]
            ?s [-1]
            - [-1]
            store [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            calibration_target [-1]
            ?i [-1]
            - [-1]
            camera [-1]
            ?o [-1]
            - [-1]
            objective [-1]
        )
        (
            on_board [-1]
            ?i [-1]
            - [-1]
            camera [-1]
            ?r [-1]
            - [-1]
            rover [-1]
        )
        (
            channel_free [-1]
            ?l [-1]
            - [-1]
            lander [-1]
        )
    )
    (
        :action [7]
        navigate [-1]
        :parameters [8]
        (
            ?x [-1]
            - [-1]
            rover [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
            ?z [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                can_traverse [-1]
                ?x [-1]
                ?y [-1]
                ?z [-1]
            )
            (
                available [-1]
                ?x [-1]
            )
            (
                at [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                visible [-1]
                ?y [-1]
                ?z [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    at [-1]
                    ?x [-1]
                    ?y [-1]
                )
            )
            (
                at [-1]
                ?x [-1]
                ?z [-1]
            )
        )
    )
    (
        :action [7]
        sample_soil [-1]
        :parameters [8]
        (
            ?x [-1]
            - [-1]
            rover [-1]
            ?s [-1]
            - [-1]
            store [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                at_soil_sample [-1]
                ?p [-1]
            )
            (
                equipped_for_soil_analysis [-1]
                ?x [-1]
            )
            (
                store_of [-1]
                ?s [-1]
                ?x [-1]
            )
            (
                empty [-1]
                ?s [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    empty [-1]
                    ?s [-1]
                )
            )
            (
                full [-1]
                ?s [-1]
            )
            (
                have_soil_analysis [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                not [47]
                (
                    at_soil_sample [-1]
                    ?p [-1]
                )
            )
        )
    )
    (
        :action [7]
        sample_rock [-1]
        :parameters [8]
        (
            ?x [-1]
            - [-1]
            rover [-1]
            ?s [-1]
            - [-1]
            store [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                at_rock_sample [-1]
                ?p [-1]
            )
            (
                equipped_for_rock_analysis [-1]
                ?x [-1]
            )
            (
                store_of [-1]
                ?s [-1]
                ?x [-1]
            )
            (
                empty [-1]
                ?s [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    empty [-1]
                    ?s [-1]
                )
            )
            (
                full [-1]
                ?s [-1]
            )
            (
                have_rock_analysis [-1]
                ?x [-1]
                ?p [-1]
            )
            (
                not [47]
                (
                    at_rock_sample [-1]
                    ?p [-1]
                )
            )
        )
    )
    (
        :action [7]
        drop [-1]
        :parameters [8]
        (
            ?x [-1]
            - [-1]
            rover [-1]
            ?y [-1]
            - [-1]
            store [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                store_of [-1]
                ?y [-1]
                ?x [-1]
            )
            (
                full [-1]
                ?y [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    full [-1]
                    ?y [-1]
                )
            )
            (
                empty [-1]
                ?y [-1]
            )
        )
    )
    (
        :action [7]
        calibrate [-1]
        :parameters [8]
        (
            ?r [-1]
            - [-1]
            rover [-1]
            ?i [-1]
            - [-1]
            camera [-1]
            ?t [-1]
            - [-1]
            objective [-1]
            ?w [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                equipped_for_imaging [-1]
                ?r [-1]
            )
            (
                calibration_target [-1]
                ?i [-1]
                ?t [-1]
            )
            (
                at [-1]
                ?r [-1]
                ?w [-1]
            )
            (
                visible_from [-1]
                ?t [-1]
                ?w [-1]
            )
            (
                on_board [-1]
                ?i [-1]
                ?r [-1]
            )
        )
        :effect [10]
        (
            calibrated [-1]
            ?i [-1]
            ?r [-1]
        )
    )
    (
        :action [7]
        take_image [-1]
        :parameters [8]
        (
            ?r [-1]
            - [-1]
            rover [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
            ?o [-1]
            - [-1]
            objective [-1]
            ?i [-1]
            - [-1]
            camera [-1]
            ?m [-1]
            - [-1]
            mode [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                calibrated [-1]
                ?i [-1]
                ?r [-1]
            )
            (
                on_board [-1]
                ?i [-1]
                ?r [-1]
            )
            (
                equipped_for_imaging [-1]
                ?r [-1]
            )
            (
                supports [-1]
                ?i [-1]
                ?m [-1]
            )
            (
                visible_from [-1]
                ?o [-1]
                ?p [-1]
            )
            (
                at [-1]
                ?r [-1]
                ?p [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                have_image [-1]
                ?r [-1]
                ?o [-1]
                ?m [-1]
            )
            (
                not [47]
                (
                    calibrated [-1]
                    ?i [-1]
                    ?r [-1]
                )
            )
        )
    )
    (
        :action [7]
        communicate_soil_data [-1]
        :parameters [8]
        (
            ?r [-1]
            - [-1]
            rover [-1]
            ?l [-1]
            - [-1]
            lander [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
            ?x [-1]
            - [-1]
            waypoint [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at [-1]
                ?r [-1]
                ?x [-1]
            )
            (
                at_lander [-1]
                ?l [-1]
                ?y [-1]
            )
            (
                have_soil_analysis [-1]
                ?r [-1]
                ?p [-1]
            )
            (
                visible [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
            (
                channel_free [-1]
                ?l [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    available [-1]
                    ?r [-1]
                )
            )
            (
                not [47]
                (
                    channel_free [-1]
                    ?l [-1]
                )
            )
            (
                channel_free [-1]
                ?l [-1]
            )
            (
                communicated_soil_data [-1]
                ?p [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
        )
    )
    (
        :action [7]
        communicate_rock_data [-1]
        :parameters [8]
        (
            ?r [-1]
            - [-1]
            rover [-1]
            ?l [-1]
            - [-1]
            lander [-1]
            ?p [-1]
            - [-1]
            waypoint [-1]
            ?x [-1]
            - [-1]
            waypoint [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at [-1]
                ?r [-1]
                ?x [-1]
            )
            (
                at_lander [-1]
                ?l [-1]
                ?y [-1]
            )
            (
                have_rock_analysis [-1]
                ?r [-1]
                ?p [-1]
            )
            (
                visible [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
            (
                channel_free [-1]
                ?l [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    available [-1]
                    ?r [-1]
                )
            )
            (
                not [47]
                (
                    channel_free [-1]
                    ?l [-1]
                )
            )
            (
                channel_free [-1]
                ?l [-1]
            )
            (
                communicated_rock_data [-1]
                ?p [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
        )
    )
    (
        :action [7]
        communicate_image_data [-1]
        :parameters [8]
        (
            ?r [-1]
            - [-1]
            rover [-1]
            ?l [-1]
            - [-1]
            lander [-1]
            ?o [-1]
            - [-1]
            objective [-1]
            ?m [-1]
            - [-1]
            mode [-1]
            ?x [-1]
            - [-1]
            waypoint [-1]
            ?y [-1]
            - [-1]
            waypoint [-1]
        )
        :precondition [9]
        (
            and [45]
            (
                at [-1]
                ?r [-1]
                ?x [-1]
            )
            (
                at_lander [-1]
                ?l [-1]
                ?y [-1]
            )
            (
                have_image [-1]
                ?r [-1]
                ?o [-1]
                ?m [-1]
            )
            (
                visible [-1]
                ?x [-1]
                ?y [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
            (
                channel_free [-1]
                ?l [-1]
            )
        )
        :effect [10]
        (
            and [45]
            (
                not [47]
                (
                    available [-1]
                    ?r [-1]
                )
            )
            (
                not [47]
                (
                    channel_free [-1]
                    ?l [-1]
                )
            )
            (
                channel_free [-1]
                ?l [-1]
            )
            (
                communicated_image_data [-1]
                ?o [-1]
                ?m [-1]
            )
            (
                available [-1]
                ?r [-1]
            )
        )
    )
)
---- pddl/rovers-domain.pddl END ----
---- pddl/rovers-p01.pddl ----
(
    define [1]
    (
        problem [37]
        roverprob1234 [-1]
    )
    (
        :domain [2]
        Rover [-1]
    )
    (
        :requirements [3]
        :typing [12]
    )
    (
        :objects [38]
        general [-1]
        - [-1]
        Lander [-1]
        colour [-1]
        high_res [-1]
        low_res [-1]
        - [-1]
        Mode [-1]
        rover0 [-1]
        - [-1]
        Rover [-1]
        rover0store [-1]
        - [-1]
        Store [-1]
        waypoint0 [-1]
        waypoint1 [-1]
        waypoint2 [-1]
        waypoint3 [-1]
        - [-1]
        Waypoint [-1]
        camera0 [-1]
        - [-1]
        Camera [-1]
        objective0 [-1]
        objective1 [-1]
        - [-1]
        Objective [-1]
    )
    (
        :init [39]
        (
            visible [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint3 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint0 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint1 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint2 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint2 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint3 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint3 [-1]
        )
        (
            at_lander [-1]
            general [-1]
            waypoint0 [-1]
        )
        (
            channel_free [-1]
            general [-1]
        )
        (
            at [-1]
            rover0 [-1]
            waypoint3 [-1]
        )
        (
            available [-1]
            rover0 [-1]
        )
        (
            store_of [-1]
            rover0store [-1]
            rover0 [-1]
        )
        (
            empty [-1]
            rover0store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint2 [-1]
            waypoint1 [-1]
        )
        (
            on_board [-1]
            camera0 [-1]
            rover0 [-1]
        )
        (
            calibration_target [-1]
            camera0 [-1]
            objective1 [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            colour [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            high_res [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint3 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint3 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                communicated_soil_data [-1]
                waypoint2 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint3 [-1]
            )
            (
                communicated_image_data [-1]
                objective1 [-1]
                high_res [-1]
            )
        )
    )
)
---- pddl/rovers-p01.pddl END ----
---- pddl/rovers-p02.pddl ----
(
    define [1]
    (
        problem [37]
        roverprob4213 [-1]
    )
    (
        :domain [2]
        Rover [-1]
    )
    (
        :objects [38]
        general [-1]
        - [-1]
        Lander [-1]
        colour [-1]
        high_res [-1]
        low_res [-1]
        - [-1]
        Mode [-1]
        rover0 [-1]
        - [-1]
        Rover [-1]
        rover0store [-1]
        - [-1]
        Store [-1]
        waypoint0 [-1]
        waypoint1 [-1]
        waypoint2 [-1]
        waypoint3 [-1]
        - [-1]
        Waypoint [-1]
        camera0 [-1]
        camera1 [-1]
        - [-1]
        Camera [-1]
        objective0 [-1]
        objective1 [-1]
        - [-1]
        Objective [-1]
    )
    (
        :init [39]
        (
            visible [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint0 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint0 [-1]
        )
        (
            at_lander [-1]
            general [-1]
            waypoint1 [-1]
        )
        (
            channel_free [-1]
            general [-1]
        )
        (
            at [-1]
            rover0 [-1]
            waypoint0 [-1]
        )
        (
            available [-1]
            rover0 [-1]
        )
        (
            store_of [-1]
            rover0store [-1]
            rover0 [-1]
        )
        (
            empty [-1]
            rover0store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint2 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            on_board [-1]
            camera0 [-1]
            rover0 [-1]
        )
        (
            calibration_target [-1]
            camera0 [-1]
            objective0 [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            colour [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            high_res [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            low_res [-1]
        )
        (
            on_board [-1]
            camera1 [-1]
            rover0 [-1]
        )
        (
            calibration_target [-1]
            camera1 [-1]
            objective1 [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            high_res [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint2 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                communicated_soil_data [-1]
                waypoint0 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint0 [-1]
            )
            (
                communicated_image_data [-1]
                objective1 [-1]
                low_res [-1]
            )
        )
    )
)
---- pddl/rovers-p02.pddl END ----
---- pddl/rovers-p03.pddl ----
(
    define [1]
    (
        problem [37]
        roverprob3726 [-1]
    )
    (
        :domain [2]
        Rover [-1]
    )
    (
        :objects [38]
        general [-1]
        - [-1]
        Lander [-1]
        colour [-1]
        high_res [-1]
        low_res [-1]
        - [-1]
        Mode [-1]
        rover0 [-1]
        rover1 [-1]
        - [-1]
        Rover [-1]
        rover0store [-1]
        rover1store [-1]
        - [-1]
        Store [-1]
        waypoint0 [-1]
        waypoint1 [-1]
        waypoint2 [-1]
        waypoint3 [-1]
        - [-1]
        Waypoint [-1]
        camera0 [-1]
        camera1 [-1]
        - [-1]
        Camera [-1]
        objective0 [-1]
        objective1 [-1]
        - [-1]
        Objective [-1]
    )
    (
        :init [39]
        (
            visible [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint3 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint0 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint1 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint2 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint2 [-1]
        )
        (
            at_lander [-1]
            general [-1]
            waypoint0 [-1]
        )
        (
            channel_free [-1]
            general [-1]
        )
        (
            at [-1]
            rover0 [-1]
            waypoint1 [-1]
        )
        (
            available [-1]
            rover0 [-1]
        )
        (
            store_of [-1]
            rover0store [-1]
            rover0 [-1]
        )
        (
            empty [-1]
            rover0store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            at [-1]
            rover1 [-1]
            waypoint3 [-1]
        )
        (
            available [-1]
            rover1 [-1]
        )
        (
            store_of [-1]
            rover1store [-1]
            rover1 [-1]
        )
        (
            empty [-1]
            rover1store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover1 [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            rover1 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint3 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint2 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            on_board [-1]
            camera0 [-1]
            rover0 [-1]
        )
        (
            calibration_target [-1]
            camera0 [-1]
            objective1 [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            low_res [-1]
        )
        (
            on_board [-1]
            camera1 [-1]
            rover1 [-1]
        )
        (
            calibration_target [-1]
            camera1 [-1]
            objective0 [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            colour [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            high_res [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            low_res [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint1 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                communicated_soil_data [-1]
                waypoint2 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint0 [-1]
            )
            (
                communicated_image_data [-1]
                objective0 [-1]
                colour [-1]
            )
        )
    )
)
---- pddl/rovers-p03.pddl END ----
---- pddl/rovers-p15.pddl ----
(
    define [1]
    (
        problem [37]
        roverprob4135 [-1]
    )
    (
        :domain [2]
        Rover [-1]
    )
    (
        :objects [38]
        general [-1]
        - [-1]
        Lander [-1]
        colour [-1]
        high_res [-1]
        low_res [-1]
        - [-1]
        Mode [-1]
        rover0 [-1]
        rover1 [-1]
        rover2 [-1]
        rover3 [-1]
        - [-1]
        Rover [-1]
        rover0store [-1]
        rover1store [-1]
        rover2store [-1]
        rover3store [-1]
        - [-1]
        Store [-1]
        waypoint0 [-1]
        waypoint1 [-1]
        waypoint2 [-1]
        waypoint3 [-1]
        waypoint4 [-1]
        waypoint5 [-1]
        waypoint6 [-1]
        waypoint7 [-1]
        waypoint8 [-1]
        waypoint9 [-1]
        waypoint10 [-1]
        - [-1]
        Waypoint [-1]
        camera0 [-1]
        camera1 [-1]
        camera2 [-1]
        camera3 [-1]
        - [-1]
        Camera [-1]
        objective0 [-1]
        objective1 [-1]
        objective2 [-1]
        objective3 [-1]
        objective4 [-1]
        - [-1]
        Objective [-1]
    )
    (
        :init [39]
        (
            visible [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint9 [-1]
        )
        (
            visible [-1]
            waypoint9 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint1 [-1]
        )
        (
            visible [-1]
            waypoint1 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint2 [-1]
        )
        (
            visible [-1]
            waypoint2 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint9 [-1]
        )
        (
            visible [-1]
            waypoint9 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint7 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint7 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint0 [-1]
        )
        (
            visible [-1]
            waypoint0 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint3 [-1]
        )
        (
            visible [-1]
            waypoint3 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint9 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint9 [-1]
        )
        (
            visible [-1]
            waypoint9 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint9 [-1]
        )
        (
            visible [-1]
            waypoint9 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint9 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint4 [-1]
        )
        (
            visible [-1]
            waypoint4 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint5 [-1]
        )
        (
            visible [-1]
            waypoint5 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint6 [-1]
        )
        (
            visible [-1]
            waypoint6 [-1]
            waypoint10 [-1]
        )
        (
            visible [-1]
            waypoint10 [-1]
            waypoint8 [-1]
        )
        (
            visible [-1]
            waypoint8 [-1]
            waypoint10 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint0 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint1 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint2 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint2 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint4 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint5 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint7 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint8 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint8 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint9 [-1]
        )
        (
            at_soil_sample [-1]
            waypoint10 [-1]
        )
        (
            at_rock_sample [-1]
            waypoint10 [-1]
        )
        (
            at_lander [-1]
            general [-1]
            waypoint9 [-1]
        )
        (
            channel_free [-1]
            general [-1]
        )
        (
            at [-1]
            rover0 [-1]
            waypoint4 [-1]
        )
        (
            available [-1]
            rover0 [-1]
        )
        (
            store_of [-1]
            rover0store [-1]
            rover0 [-1]
        )
        (
            empty [-1]
            rover0store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover0 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint2 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint5 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint5 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint8 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint8 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint9 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint9 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint4 [-1]
            waypoint10 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint10 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint3 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint0 [-1]
            waypoint7 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint7 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint1 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover0 [-1]
            waypoint6 [-1]
            waypoint1 [-1]
        )
        (
            at [-1]
            rover1 [-1]
            waypoint6 [-1]
        )
        (
            available [-1]
            rover1 [-1]
        )
        (
            store_of [-1]
            rover1store [-1]
            rover1 [-1]
        )
        (
            empty [-1]
            rover1store [-1]
        )
        (
            equipped_for_imaging [-1]
            rover1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint1 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint2 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint3 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint4 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint5 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint5 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint6 [-1]
            waypoint10 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint10 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint1 [-1]
            waypoint7 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint7 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint1 [-1]
            waypoint8 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint8 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint3 [-1]
            waypoint9 [-1]
        )
        (
            can_traverse [-1]
            rover1 [-1]
            waypoint9 [-1]
            waypoint3 [-1]
        )
        (
            at [-1]
            rover2 [-1]
            waypoint6 [-1]
        )
        (
            available [-1]
            rover2 [-1]
        )
        (
            store_of [-1]
            rover2store [-1]
            rover2 [-1]
        )
        (
            empty [-1]
            rover2store [-1]
        )
        (
            equipped_for_soil_analysis [-1]
            rover2 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint6 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint1 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint6 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint4 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint6 [-1]
            waypoint5 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint5 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint6 [-1]
            waypoint9 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint9 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint6 [-1]
            waypoint10 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint10 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint1 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint0 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint1 [-1]
            waypoint7 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint7 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint4 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint2 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint9 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint3 [-1]
            waypoint9 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint9 [-1]
            waypoint8 [-1]
        )
        (
            can_traverse [-1]
            rover2 [-1]
            waypoint8 [-1]
            waypoint9 [-1]
        )
        (
            at [-1]
            rover3 [-1]
            waypoint4 [-1]
        )
        (
            available [-1]
            rover3 [-1]
        )
        (
            store_of [-1]
            rover3store [-1]
            rover3 [-1]
        )
        (
            empty [-1]
            rover3store [-1]
        )
        (
            equipped_for_rock_analysis [-1]
            rover3 [-1]
        )
        (
            equipped_for_imaging [-1]
            rover3 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint0 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint1 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint2 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint2 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint5 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint5 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint6 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint6 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint8 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint8 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint4 [-1]
            waypoint9 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint9 [-1]
            waypoint4 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint0 [-1]
            waypoint7 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint7 [-1]
            waypoint0 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint1 [-1]
            waypoint3 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint3 [-1]
            waypoint1 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint1 [-1]
            waypoint10 [-1]
        )
        (
            can_traverse [-1]
            rover3 [-1]
            waypoint10 [-1]
            waypoint1 [-1]
        )
        (
            on_board [-1]
            camera0 [-1]
            rover3 [-1]
        )
        (
            calibration_target [-1]
            camera0 [-1]
            objective2 [-1]
        )
        (
            supports [-1]
            camera0 [-1]
            low_res [-1]
        )
        (
            on_board [-1]
            camera1 [-1]
            rover0 [-1]
        )
        (
            calibration_target [-1]
            camera1 [-1]
            objective4 [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            colour [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            high_res [-1]
        )
        (
            supports [-1]
            camera1 [-1]
            low_res [-1]
        )
        (
            on_board [-1]
            camera2 [-1]
            rover1 [-1]
        )
        (
            calibration_target [-1]
            camera2 [-1]
            objective4 [-1]
        )
        (
            supports [-1]
            camera2 [-1]
            high_res [-1]
        )
        (
            supports [-1]
            camera2 [-1]
            low_res [-1]
        )
        (
            on_board [-1]
            camera3 [-1]
            rover1 [-1]
        )
        (
            calibration_target [-1]
            camera3 [-1]
            objective3 [-1]
        )
        (
            supports [-1]
            camera3 [-1]
            colour [-1]
        )
        (
            supports [-1]
            camera3 [-1]
            high_res [-1]
        )
        (
            supports [-1]
            camera3 [-1]
            low_res [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint3 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint4 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint5 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint6 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint7 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint8 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint9 [-1]
        )
        (
            visible_from [-1]
            objective0 [-1]
            waypoint10 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint3 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint4 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint5 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint6 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint7 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint8 [-1]
        )
        (
            visible_from [-1]
            objective1 [-1]
            waypoint9 [-1]
        )
        (
            visible_from [-1]
            objective2 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective2 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective2 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective3 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective3 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective3 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective3 [-1]
            waypoint3 [-1]
        )
        (
            visible_from [-1]
            objective3 [-1]
            waypoint4 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint0 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint1 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint2 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint3 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint4 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint5 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint6 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint7 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint8 [-1]
        )
        (
            visible_from [-1]
            objective4 [-1]
            waypoint9 [-1]
        )
    )
    (
        :goal [40]
        (
            and [45]
            (
                communicated_soil_data [-1]
                waypoint5 [-1]
            )
            (
                communicated_soil_data [-1]
                waypoint2 [-1]
            )
            (
                communicated_soil_data [-1]
                waypoint8 [-1]
            )
            (
                communicated_soil_data [-1]
                waypoint10 [-1]
            )
            (
                communicated_soil_data [-1]
                waypoint0 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint2 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint1 [-1]
            )
            (
                communicated_rock_data [-1]
                waypoint8 [-1]
            )
            (
                communicated_image_data [-1]
                objective1 [-1]
                low_res [-1]
            )
            (
                communicated_image_data [-1]
                objective1 [-1]
                high_res [-1]
            )
        )
    )
)
---- pddl/rovers-p15.pddl END ----
