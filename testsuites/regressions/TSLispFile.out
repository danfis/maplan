---- pddl/CityCar-domain.pddl ----
(
    define
    (
        domain
        citycar
    )
    (
        :requirements
        :typing
        :equality
        :negative-preconditions
        :action-costs
        :conditional-effects
    )
    (
        :types
        car
        junction
        garage
        road
    )
    (
        :predicates
        (
            same_line
            ?xy
            -
            junction
            ?xy2
            -
            junction
        )
        (
            diagonal
            ?x
            -
            junction
            ?y
            -
            junction
        )
        (
            at_car_jun
            ?c
            -
            car
            ?x
            -
            junction
        )
        (
            at_car_road
            ?c
            -
            car
            ?x
            -
            road
        )
        (
            starting
            ?c
            -
            car
            ?x
            -
            garage
        )
        (
            arrived
            ?c
            -
            car
            ?x
            -
            junction
        )
        (
            road_connect
            ?r1
            -
            road
            ?xy
            -
            junction
            ?xy2
            -
            junction
        )
        (
            clear
            ?xy
            -
            junction
        )
        (
            in_place
            ?x
            -
            road
        )
        (
            at_garage
            ?g
            -
            garage
            ?xy
            -
            junction
        )
    )
    (
        :functions
        (
            total-cost
        )
        -
        number
    )
    (
        :action
        move_car_in_road
        :parameters
        (
            ?xy_initial
            -
            junction
            ?xy_final
            -
            junction
            ?machine
            -
            car
            ?r1
            -
            road
        )
        :precondition
        (
            and
            (
                at_car_jun
                ?machine
                ?xy_initial
            )
            (
                not
                (
                    =
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                road_connect
                ?r1
                ?xy_initial
                ?xy_final
            )
            (
                in_place
                ?r1
            )
        )
        :effect
        (
            and
            (
                clear
                ?xy_initial
            )
            (
                at_car_road
                ?machine
                ?r1
            )
            (
                not
                (
                    at_car_jun
                    ?machine
                    ?xy_initial
                )
            )
            (
                increase
                (
                    total-cost
                )
                1
            )
        )
    )
    (
        :action
        move_car_out_road
        :parameters
        (
            ?xy_initial
            -
            junction
            ?xy_final
            -
            junction
            ?machine
            -
            car
            ?r1
            -
            road
        )
        :precondition
        (
            and
            (
                at_car_road
                ?machine
                ?r1
            )
            (
                clear
                ?xy_final
            )
            (
                not
                (
                    =
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                road_connect
                ?r1
                ?xy_initial
                ?xy_final
            )
            (
                in_place
                ?r1
            )
        )
        :effect
        (
            and
            (
                at_car_jun
                ?machine
                ?xy_final
            )
            (
                not
                (
                    clear
                    ?xy_final
                )
            )
            (
                not
                (
                    at_car_road
                    ?machine
                    ?r1
                )
            )
            (
                increase
                (
                    total-cost
                )
                1
            )
        )
    )
    (
        :action
        car_arrived
        :parameters
        (
            ?xy_final
            -
            junction
            ?machine
            -
            car
        )
        :precondition
        (
            and
            (
                at_car_jun
                ?machine
                ?xy_final
            )
        )
        :effect
        (
            and
            (
                clear
                ?xy_final
            )
            (
                arrived
                ?machine
                ?xy_final
            )
            (
                not
                (
                    at_car_jun
                    ?machine
                    ?xy_final
                )
            )
        )
    )
    (
        :action
        car_start
        :parameters
        (
            ?xy_final
            -
            junction
            ?machine
            -
            car
            ?g
            -
            garage
        )
        :precondition
        (
            and
            (
                at_garage
                ?g
                ?xy_final
            )
            (
                starting
                ?machine
                ?g
            )
            (
                clear
                ?xy_final
            )
        )
        :effect
        (
            and
            (
                not
                (
                    clear
                    ?xy_final
                )
            )
            (
                at_car_jun
                ?machine
                ?xy_final
            )
            (
                not
                (
                    starting
                    ?machine
                    ?g
                )
            )
        )
    )
    (
        :action
        build_diagonal_oneway
        :parameters
        (
            ?xy_initial
            -
            junction
            ?xy_final
            -
            junction
            ?r1
            -
            road
        )
        :precondition
        (
            and
            (
                clear
                ?xy_final
            )
            (
                not
                (
                    =
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                not
                (
                    in_place
                    ?r1
                )
            )
            (
                diagonal
                ?xy_initial
                ?xy_final
            )
        )
        :effect
        (
            and
            (
                road_connect
                ?r1
                ?xy_initial
                ?xy_final
            )
            (
                in_place
                ?r1
            )
            (
                increase
                (
                    total-cost
                )
                30
            )
        )
    )
    (
        :action
        build_straight_oneway
        :parameters
        (
            ?xy_initial
            -
            junction
            ?xy_final
            -
            junction
            ?r1
            -
            road
        )
        :precondition
        (
            and
            (
                clear
                ?xy_final
            )
            (
                not
                (
                    =
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                same_line
                ?xy_initial
                ?xy_final
            )
            (
                not
                (
                    in_place
                    ?r1
                )
            )
        )
        :effect
        (
            and
            (
                road_connect
                ?r1
                ?xy_initial
                ?xy_final
            )
            (
                in_place
                ?r1
            )
            (
                increase
                (
                    total-cost
                )
                20
            )
        )
    )
    (
        :action
        destroy_road
        :parameters
        (
            ?xy_initial
            -
            junction
            ?xy_final
            -
            junction
            ?r1
            -
            road
        )
        :precondition
        (
            and
            (
                road_connect
                ?r1
                ?xy_initial
                ?xy_final
            )
            (
                not
                (
                    =
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                in_place
                ?r1
            )
        )
        :effect
        (
            and
            (
                not
                (
                    in_place
                    ?r1
                )
            )
            (
                not
                (
                    road_connect
                    ?r1
                    ?xy_initial
                    ?xy_final
                )
            )
            (
                increase
                (
                    total-cost
                )
                10
            )
            (
                forall
                (
                    ?c1
                    -
                    car
                )
                (
                    when
                    (
                        at_car_road
                        ?c1
                        ?r1
                    )
                    (
                        and
                        (
                            not
                            (
                                at_car_road
                                ?c1
                                ?r1
                            )
                        )
                        (
                            at_car_jun
                            ?c1
                            ?xy_initial
                        )
                    )
                )
            )
        )
    )
)
---- pddl/CityCar-domain.pddl END ----
---- pddl/CityCar-p3-2-2-0-1.pddl ----
(
    define
    (
        problem
        citycar-3-3-2
    )
    (
        :domain
        citycar
    )
    (
        :objects
        junction0-0
        junction0-1
        junction0-2
        junction1-0
        junction1-1
        junction1-2
        junction2-0
        junction2-1
        junction2-2
        -
        junction
        car0
        car1
        -
        car
        garage0
        garage1
        -
        garage
        road0
        road1
        road2
        road3
        road4
        -
        road
    )
    (
        :init
        (
            same_line
            junction0-0
            junction0-1
        )
        (
            same_line
            junction0-1
            junction0-0
        )
        (
            same_line
            junction0-1
            junction0-2
        )
        (
            same_line
            junction0-2
            junction0-1
        )
        (
            same_line
            junction1-0
            junction1-1
        )
        (
            same_line
            junction1-1
            junction1-0
        )
        (
            same_line
            junction1-1
            junction1-2
        )
        (
            same_line
            junction1-2
            junction1-1
        )
        (
            same_line
            junction2-0
            junction2-1
        )
        (
            same_line
            junction2-1
            junction2-0
        )
        (
            same_line
            junction2-1
            junction2-2
        )
        (
            same_line
            junction2-2
            junction2-1
        )
        (
            same_line
            junction0-0
            junction1-0
        )
        (
            same_line
            junction1-0
            junction0-0
        )
        (
            same_line
            junction1-0
            junction2-0
        )
        (
            same_line
            junction2-0
            junction1-0
        )
        (
            same_line
            junction0-1
            junction1-1
        )
        (
            same_line
            junction1-1
            junction0-1
        )
        (
            same_line
            junction1-1
            junction2-1
        )
        (
            same_line
            junction2-1
            junction1-1
        )
        (
            same_line
            junction0-2
            junction1-2
        )
        (
            same_line
            junction1-2
            junction0-2
        )
        (
            same_line
            junction1-2
            junction2-2
        )
        (
            same_line
            junction2-2
            junction1-2
        )
        (
            diagonal
            junction0-0
            junction1-1
        )
        (
            diagonal
            junction1-1
            junction0-0
        )
        (
            diagonal
            junction0-1
            junction1-0
        )
        (
            diagonal
            junction1-0
            junction0-1
        )
        (
            diagonal
            junction0-1
            junction1-2
        )
        (
            diagonal
            junction1-2
            junction0-1
        )
        (
            diagonal
            junction0-2
            junction1-1
        )
        (
            diagonal
            junction1-1
            junction0-2
        )
        (
            diagonal
            junction1-0
            junction2-1
        )
        (
            diagonal
            junction2-1
            junction1-0
        )
        (
            diagonal
            junction1-1
            junction2-0
        )
        (
            diagonal
            junction2-0
            junction1-1
        )
        (
            diagonal
            junction1-1
            junction2-2
        )
        (
            diagonal
            junction2-2
            junction1-1
        )
        (
            diagonal
            junction1-2
            junction2-1
        )
        (
            diagonal
            junction2-1
            junction1-2
        )
        (
            clear
            junction0-0
        )
        (
            clear
            junction0-1
        )
        (
            clear
            junction0-2
        )
        (
            clear
            junction1-0
        )
        (
            clear
            junction1-1
        )
        (
            clear
            junction1-2
        )
        (
            clear
            junction2-0
        )
        (
            clear
            junction2-1
        )
        (
            clear
            junction2-2
        )
        (
            at_garage
            garage0
            junction0-0
        )
        (
            at_garage
            garage1
            junction0-0
        )
        (
            starting
            car0
            garage0
        )
        (
            starting
            car1
            garage1
        )
        (
            =
            (
                total-cost
            )
            0
        )
    )
    (
        :goal
        (
            and
            (
                arrived
                car0
                junction2-0
            )
            (
                arrived
                car1
                junction2-1
            )
        )
    )
    (
        :metric
        minimize
        (
            total-cost
        )
    )
)
---- pddl/CityCar-p3-2-2-0-1.pddl END ----
---- pddl/depot-domain.pddl ----
(
    define
    (
        domain
        depot
    )
    (
        :predicates
        (
            at
            ?x
            ?y
        )
        (
            on
            ?x
            ?y
        )
        (
            in
            ?x
            ?y
        )
        (
            lifting
            ?x
            ?y
        )
        (
            available
            ?x
        )
        (
            clear
            ?x
        )
        (
            place
            ?x
        )
        (
            locatable
            ?x
        )
        (
            depot
            ?x
        )
        (
            distributor
            ?x
        )
        (
            truck
            ?x
        )
        (
            hoist
            ?x
        )
        (
            surface
            ?x
        )
        (
            pallet
            ?x
        )
        (
            crate
            ?x
        )
    )
    (
        :action
        drive
        :parameters
        (
            ?x
            ?y
            ?z
        )
        :precondition
        (
            and
            (
                truck
                ?x
            )
            (
                place
                ?y
            )
            (
                place
                ?z
            )
            (
                at
                ?x
                ?y
            )
        )
        :effect
        (
            and
            (
                at
                ?x
                ?z
            )
            (
                not
                (
                    at
                    ?x
                    ?y
                )
            )
        )
    )
    (
        :action
        lift
        :parameters
        (
            ?x
            ?y
            ?z
            ?p
        )
        :precondition
        (
            and
            (
                hoist
                ?x
            )
            (
                crate
                ?y
            )
            (
                surface
                ?z
            )
            (
                place
                ?p
            )
            (
                at
                ?x
                ?p
            )
            (
                available
                ?x
            )
            (
                at
                ?y
                ?p
            )
            (
                on
                ?y
                ?z
            )
            (
                clear
                ?y
            )
        )
        :effect
        (
            and
            (
                lifting
                ?x
                ?y
            )
            (
                clear
                ?z
            )
            (
                not
                (
                    at
                    ?y
                    ?p
                )
            )
            (
                not
                (
                    clear
                    ?y
                )
            )
            (
                not
                (
                    available
                    ?x
                )
            )
            (
                not
                (
                    on
                    ?y
                    ?z
                )
            )
        )
    )
    (
        :action
        drop
        :parameters
        (
            ?x
            ?y
            ?z
            ?p
        )
        :precondition
        (
            and
            (
                hoist
                ?x
            )
            (
                crate
                ?y
            )
            (
                surface
                ?z
            )
            (
                place
                ?p
            )
            (
                at
                ?x
                ?p
            )
            (
                at
                ?z
                ?p
            )
            (
                clear
                ?z
            )
            (
                lifting
                ?x
                ?y
            )
        )
        :effect
        (
            and
            (
                available
                ?x
            )
            (
                at
                ?y
                ?p
            )
            (
                clear
                ?y
            )
            (
                on
                ?y
                ?z
            )
            (
                not
                (
                    lifting
                    ?x
                    ?y
                )
            )
            (
                not
                (
                    clear
                    ?z
                )
            )
        )
    )
    (
        :action
        load
        :parameters
        (
            ?x
            ?y
            ?z
            ?p
        )
        :precondition
        (
            and
            (
                hoist
                ?x
            )
            (
                crate
                ?y
            )
            (
                truck
                ?z
            )
            (
                place
                ?p
            )
            (
                at
                ?x
                ?p
            )
            (
                at
                ?z
                ?p
            )
            (
                lifting
                ?x
                ?y
            )
        )
        :effect
        (
            and
            (
                in
                ?y
                ?z
            )
            (
                available
                ?x
            )
            (
                not
                (
                    lifting
                    ?x
                    ?y
                )
            )
        )
    )
    (
        :action
        unload
        :parameters
        (
            ?x
            ?y
            ?z
            ?p
        )
        :precondition
        (
            and
            (
                hoist
                ?x
            )
            (
                crate
                ?y
            )
            (
                truck
                ?z
            )
            (
                place
                ?p
            )
            (
                at
                ?x
                ?p
            )
            (
                at
                ?z
                ?p
            )
            (
                available
                ?x
            )
            (
                in
                ?y
                ?z
            )
        )
        :effect
        (
            and
            (
                lifting
                ?x
                ?y
            )
            (
                not
                (
                    in
                    ?y
                    ?z
                )
            )
            (
                not
                (
                    available
                    ?x
                )
            )
        )
    )
)
---- pddl/depot-domain.pddl END ----
---- pddl/depot-pfile1.pddl ----
(
    define
    (
        problem
        depotprob1818
    )
    (
        :domain
        Depot
    )
    (
        :objects
        depot0
        distributor0
        distributor1
        truck0
        truck1
        pallet0
        pallet1
        pallet2
        crate0
        crate1
        hoist0
        hoist1
        hoist2
    )
    (
        :init
        (
            pallet
            pallet0
        )
        (
            surface
            pallet0
        )
        (
            at
            pallet0
            depot0
        )
        (
            clear
            crate1
        )
        (
            pallet
            pallet1
        )
        (
            surface
            pallet1
        )
        (
            at
            pallet1
            distributor0
        )
        (
            clear
            crate0
        )
        (
            pallet
            pallet2
        )
        (
            surface
            pallet2
        )
        (
            at
            pallet2
            distributor1
        )
        (
            clear
            pallet2
        )
        (
            truck
            truck0
        )
        (
            at
            truck0
            distributor1
        )
        (
            truck
            truck1
        )
        (
            at
            truck1
            depot0
        )
        (
            hoist
            hoist0
        )
        (
            at
            hoist0
            depot0
        )
        (
            available
            hoist0
        )
        (
            hoist
            hoist1
        )
        (
            at
            hoist1
            distributor0
        )
        (
            available
            hoist1
        )
        (
            hoist
            hoist2
        )
        (
            at
            hoist2
            distributor1
        )
        (
            available
            hoist2
        )
        (
            crate
            crate0
        )
        (
            surface
            crate0
        )
        (
            at
            crate0
            distributor0
        )
        (
            on
            crate0
            pallet1
        )
        (
            crate
            crate1
        )
        (
            surface
            crate1
        )
        (
            at
            crate1
            depot0
        )
        (
            on
            crate1
            pallet0
        )
        (
            place
            depot0
        )
        (
            place
            distributor0
        )
        (
            place
            distributor1
        )
    )
    (
        :goal
        (
            and
            (
                on
                crate0
                pallet2
            )
            (
                on
                crate1
                pallet1
            )
        )
    )
)
---- pddl/depot-pfile1.pddl END ----
---- pddl/depot-pfile2.pddl ----
(
    define
    (
        problem
        depotprob7512
    )
    (
        :domain
        Depot
    )
    (
        :objects
        depot0
        distributor0
        distributor1
        truck0
        truck1
        pallet0
        pallet1
        pallet2
        crate0
        crate1
        crate2
        crate3
        hoist0
        hoist1
        hoist2
    )
    (
        :init
        (
            pallet
            pallet0
        )
        (
            surface
            pallet0
        )
        (
            at
            pallet0
            depot0
        )
        (
            clear
            crate0
        )
        (
            pallet
            pallet1
        )
        (
            surface
            pallet1
        )
        (
            at
            pallet1
            distributor0
        )
        (
            clear
            crate3
        )
        (
            pallet
            pallet2
        )
        (
            surface
            pallet2
        )
        (
            at
            pallet2
            distributor1
        )
        (
            clear
            crate2
        )
        (
            truck
            truck0
        )
        (
            at
            truck0
            depot0
        )
        (
            truck
            truck1
        )
        (
            at
            truck1
            depot0
        )
        (
            hoist
            hoist0
        )
        (
            at
            hoist0
            depot0
        )
        (
            available
            hoist0
        )
        (
            hoist
            hoist1
        )
        (
            at
            hoist1
            distributor0
        )
        (
            available
            hoist1
        )
        (
            hoist
            hoist2
        )
        (
            at
            hoist2
            distributor1
        )
        (
            available
            hoist2
        )
        (
            crate
            crate0
        )
        (
            surface
            crate0
        )
        (
            at
            crate0
            depot0
        )
        (
            on
            crate0
            pallet0
        )
        (
            crate
            crate1
        )
        (
            surface
            crate1
        )
        (
            at
            crate1
            distributor1
        )
        (
            on
            crate1
            pallet2
        )
        (
            crate
            crate2
        )
        (
            surface
            crate2
        )
        (
            at
            crate2
            distributor1
        )
        (
            on
            crate2
            crate1
        )
        (
            crate
            crate3
        )
        (
            surface
            crate3
        )
        (
            at
            crate3
            distributor0
        )
        (
            on
            crate3
            pallet1
        )
        (
            place
            depot0
        )
        (
            place
            distributor0
        )
        (
            place
            distributor1
        )
    )
    (
        :goal
        (
            and
            (
                on
                crate0
                pallet2
            )
            (
                on
                crate1
                crate3
            )
            (
                on
                crate2
                pallet0
            )
            (
                on
                crate3
                pallet1
            )
        )
    )
)
---- pddl/depot-pfile2.pddl END ----
---- pddl/depot-pfile5.pddl ----
(
    define
    (
        problem
        depotprob1212
    )
    (
        :domain
        Depot
    )
    (
        :objects
        depot0
        distributor0
        distributor1
        truck0
        truck1
        pallet0
        pallet1
        pallet2
        crate0
        crate1
        crate2
        crate3
        crate4
        crate5
        crate6
        crate7
        crate8
        crate9
        hoist0
        hoist1
        hoist2
    )
    (
        :init
        (
            pallet
            pallet0
        )
        (
            surface
            pallet0
        )
        (
            at
            pallet0
            depot0
        )
        (
            clear
            crate4
        )
        (
            pallet
            pallet1
        )
        (
            surface
            pallet1
        )
        (
            at
            pallet1
            distributor0
        )
        (
            clear
            crate8
        )
        (
            pallet
            pallet2
        )
        (
            surface
            pallet2
        )
        (
            at
            pallet2
            distributor1
        )
        (
            clear
            crate9
        )
        (
            truck
            truck0
        )
        (
            at
            truck0
            depot0
        )
        (
            truck
            truck1
        )
        (
            at
            truck1
            distributor0
        )
        (
            hoist
            hoist0
        )
        (
            at
            hoist0
            depot0
        )
        (
            available
            hoist0
        )
        (
            hoist
            hoist1
        )
        (
            at
            hoist1
            distributor0
        )
        (
            available
            hoist1
        )
        (
            hoist
            hoist2
        )
        (
            at
            hoist2
            distributor1
        )
        (
            available
            hoist2
        )
        (
            crate
            crate0
        )
        (
            surface
            crate0
        )
        (
            at
            crate0
            distributor1
        )
        (
            on
            crate0
            pallet2
        )
        (
            crate
            crate1
        )
        (
            surface
            crate1
        )
        (
            at
            crate1
            depot0
        )
        (
            on
            crate1
            pallet0
        )
        (
            crate
            crate2
        )
        (
            surface
            crate2
        )
        (
            at
            crate2
            distributor1
        )
        (
            on
            crate2
            crate0
        )
        (
            crate
            crate3
        )
        (
            surface
            crate3
        )
        (
            at
            crate3
            depot0
        )
        (
            on
            crate3
            crate1
        )
        (
            crate
            crate4
        )
        (
            surface
            crate4
        )
        (
            at
            crate4
            depot0
        )
        (
            on
            crate4
            crate3
        )
        (
            crate
            crate5
        )
        (
            surface
            crate5
        )
        (
            at
            crate5
            distributor1
        )
        (
            on
            crate5
            crate2
        )
        (
            crate
            crate6
        )
        (
            surface
            crate6
        )
        (
            at
            crate6
            distributor0
        )
        (
            on
            crate6
            pallet1
        )
        (
            crate
            crate7
        )
        (
            surface
            crate7
        )
        (
            at
            crate7
            distributor0
        )
        (
            on
            crate7
            crate6
        )
        (
            crate
            crate8
        )
        (
            surface
            crate8
        )
        (
            at
            crate8
            distributor0
        )
        (
            on
            crate8
            crate7
        )
        (
            crate
            crate9
        )
        (
            surface
            crate9
        )
        (
            at
            crate9
            distributor1
        )
        (
            on
            crate9
            crate5
        )
        (
            place
            depot0
        )
        (
            place
            distributor0
        )
        (
            place
            distributor1
        )
    )
    (
        :goal
        (
            and
            (
                on
                crate0
                crate5
            )
            (
                on
                crate1
                pallet1
            )
            (
                on
                crate2
                crate0
            )
            (
                on
                crate3
                pallet2
            )
            (
                on
                crate4
                crate6
            )
            (
                on
                crate5
                crate4
            )
            (
                on
                crate6
                crate9
            )
            (
                on
                crate7
                crate1
            )
            (
                on
                crate8
                crate3
            )
            (
                on
                crate9
                pallet0
            )
        )
    )
)
---- pddl/depot-pfile5.pddl END ----
---- pddl/driverlog-domain.pddl ----
(
    define
    (
        domain
        driverlog
    )
    (
        :requirements
        :strips
    )
    (
        :predicates
        (
            OBJ
            ?obj
        )
        (
            TRUCK
            ?truck
        )
        (
            LOCATION
            ?loc
        )
        (
            driver
            ?d
        )
        (
            at
            ?obj
            ?loc
        )
        (
            in
            ?obj1
            ?obj
        )
        (
            driving
            ?d
            ?v
        )
        (
            link
            ?x
            ?y
        )
        (
            path
            ?x
            ?y
        )
        (
            empty
            ?v
        )
    )
    (
        :action
        LOAD-TRUCK
        :parameters
        (
            ?obj
            ?truck
            ?driver
            ?loc
        )
        :precondition
        (
            and
            (
                OBJ
                ?obj
            )
            (
                TRUCK
                ?truck
            )
            (
                LOCATION
                ?loc
            )
            (
                DRIVER
                ?driver
            )
            (
                at
                ?truck
                ?loc
            )
            (
                at
                ?obj
                ?loc
            )
            (
                driving
                ?driver
                ?truck
            )
        )
        :effect
        (
            and
            (
                not
                (
                    at
                    ?obj
                    ?loc
                )
            )
            (
                in
                ?obj
                ?truck
            )
        )
    )
    (
        :action
        UNLOAD-TRUCK
        :parameters
        (
            ?obj
            ?truck
            ?driver
            ?loc
        )
        :precondition
        (
            and
            (
                OBJ
                ?obj
            )
            (
                TRUCK
                ?truck
            )
            (
                LOCATION
                ?loc
            )
            (
                DRIVER
                ?driver
            )
            (
                at
                ?truck
                ?loc
            )
            (
                in
                ?obj
                ?truck
            )
            (
                driving
                ?driver
                ?truck
            )
        )
        :effect
        (
            and
            (
                not
                (
                    in
                    ?obj
                    ?truck
                )
            )
            (
                at
                ?obj
                ?loc
            )
        )
    )
    (
        :action
        BOARD-TRUCK
        :parameters
        (
            ?driver
            ?truck
            ?loc
        )
        :precondition
        (
            and
            (
                DRIVER
                ?driver
            )
            (
                TRUCK
                ?truck
            )
            (
                LOCATION
                ?loc
            )
            (
                at
                ?truck
                ?loc
            )
            (
                at
                ?driver
                ?loc
            )
            (
                empty
                ?truck
            )
        )
        :effect
        (
            and
            (
                not
                (
                    at
                    ?driver
                    ?loc
                )
            )
            (
                driving
                ?driver
                ?truck
            )
            (
                not
                (
                    empty
                    ?truck
                )
            )
        )
    )
    (
        :action
        DISEMBARK-TRUCK
        :parameters
        (
            ?driver
            ?truck
            ?loc
        )
        :precondition
        (
            and
            (
                DRIVER
                ?driver
            )
            (
                TRUCK
                ?truck
            )
            (
                LOCATION
                ?loc
            )
            (
                at
                ?truck
                ?loc
            )
            (
                driving
                ?driver
                ?truck
            )
        )
        :effect
        (
            and
            (
                not
                (
                    driving
                    ?driver
                    ?truck
                )
            )
            (
                at
                ?driver
                ?loc
            )
            (
                empty
                ?truck
            )
        )
    )
    (
        :action
        DRIVE-TRUCK
        :parameters
        (
            ?truck
            ?loc-from
            ?loc-to
            ?driver
        )
        :precondition
        (
            and
            (
                TRUCK
                ?truck
            )
            (
                LOCATION
                ?loc-from
            )
            (
                LOCATION
                ?loc-to
            )
            (
                DRIVER
                ?driver
            )
            (
                at
                ?truck
                ?loc-from
            )
            (
                driving
                ?driver
                ?truck
            )
            (
                link
                ?loc-from
                ?loc-to
            )
        )
        :effect
        (
            and
            (
                not
                (
                    at
                    ?truck
                    ?loc-from
                )
            )
            (
                at
                ?truck
                ?loc-to
            )
        )
    )
    (
        :action
        WALK
        :parameters
        (
            ?driver
            ?loc-from
            ?loc-to
        )
        :precondition
        (
            and
            (
                DRIVER
                ?driver
            )
            (
                LOCATION
                ?loc-from
            )
            (
                LOCATION
                ?loc-to
            )
            (
                at
                ?driver
                ?loc-from
            )
            (
                path
                ?loc-from
                ?loc-to
            )
        )
        :effect
        (
            and
            (
                not
                (
                    at
                    ?driver
                    ?loc-from
                )
            )
            (
                at
                ?driver
                ?loc-to
            )
        )
    )
)
---- pddl/driverlog-domain.pddl END ----
---- pddl/driverlog-pfile1.pddl ----
(
    define
    (
        problem
        DLOG-2-2-2
    )
    (
        :domain
        driverlog
    )
    (
        :objects
        driver1
        driver2
        truck1
        truck2
        package1
        package2
        s0
        s1
        s2
        p1-0
        p1-2
    )
    (
        :init
        (
            at
            driver1
            s2
        )
        (
            DRIVER
            driver1
        )
        (
            at
            driver2
            s2
        )
        (
            DRIVER
            driver2
        )
        (
            at
            truck1
            s0
        )
        (
            empty
            truck1
        )
        (
            TRUCK
            truck1
        )
        (
            at
            truck2
            s0
        )
        (
            empty
            truck2
        )
        (
            TRUCK
            truck2
        )
        (
            at
            package1
            s0
        )
        (
            OBJ
            package1
        )
        (
            at
            package2
            s0
        )
        (
            OBJ
            package2
        )
        (
            LOCATION
            s0
        )
        (
            LOCATION
            s1
        )
        (
            LOCATION
            s2
        )
        (
            LOCATION
            p1-0
        )
        (
            LOCATION
            p1-2
        )
        (
            path
            s1
            p1-0
        )
        (
            path
            p1-0
            s1
        )
        (
            path
            s0
            p1-0
        )
        (
            path
            p1-0
            s0
        )
        (
            path
            s1
            p1-2
        )
        (
            path
            p1-2
            s1
        )
        (
            path
            s2
            p1-2
        )
        (
            path
            p1-2
            s2
        )
        (
            link
            s0
            s1
        )
        (
            link
            s1
            s0
        )
        (
            link
            s0
            s2
        )
        (
            link
            s2
            s0
        )
        (
            link
            s2
            s1
        )
        (
            link
            s1
            s2
        )
    )
    (
        :goal
        (
            and
            (
                at
                driver1
                s1
            )
            (
                at
                truck1
                s1
            )
            (
                at
                package1
                s0
            )
            (
                at
                package2
                s0
            )
        )
    )
)
---- pddl/driverlog-pfile1.pddl END ----
---- pddl/driverlog-pfile3.pddl ----
(
    define
    (
        problem
        DLOG-2-2-4
    )
    (
        :domain
        driverlog
    )
    (
        :objects
        driver1
        driver2
        truck1
        truck2
        package1
        package2
        package3
        package4
        s0
        s1
        s2
        p0-1
        p2-0
        p2-1
    )
    (
        :init
        (
            at
            driver1
            s1
        )
        (
            DRIVER
            driver1
        )
        (
            at
            driver2
            s0
        )
        (
            DRIVER
            driver2
        )
        (
            at
            truck1
            s1
        )
        (
            empty
            truck1
        )
        (
            TRUCK
            truck1
        )
        (
            at
            truck2
            s2
        )
        (
            empty
            truck2
        )
        (
            TRUCK
            truck2
        )
        (
            at
            package1
            s0
        )
        (
            OBJ
            package1
        )
        (
            at
            package2
            s0
        )
        (
            OBJ
            package2
        )
        (
            at
            package3
            s1
        )
        (
            OBJ
            package3
        )
        (
            at
            package4
            s1
        )
        (
            OBJ
            package4
        )
        (
            LOCATION
            s0
        )
        (
            LOCATION
            s1
        )
        (
            LOCATION
            s2
        )
        (
            LOCATION
            p0-1
        )
        (
            LOCATION
            p2-0
        )
        (
            LOCATION
            p2-1
        )
        (
            path
            s0
            p0-1
        )
        (
            path
            p0-1
            s0
        )
        (
            path
            s1
            p0-1
        )
        (
            path
            p0-1
            s1
        )
        (
            path
            s2
            p2-0
        )
        (
            path
            p2-0
            s2
        )
        (
            path
            s0
            p2-0
        )
        (
            path
            p2-0
            s0
        )
        (
            path
            s2
            p2-1
        )
        (
            path
            p2-1
            s2
        )
        (
            path
            s1
            p2-1
        )
        (
            path
            p2-1
            s1
        )
        (
            link
            s1
            s0
        )
        (
            link
            s0
            s1
        )
        (
            link
            s1
            s2
        )
        (
            link
            s2
            s1
        )
        (
            link
            s2
            s0
        )
        (
            link
            s0
            s2
        )
    )
    (
        :goal
        (
            and
            (
                at
                driver2
                s2
            )
            (
                at
                truck1
                s1
            )
            (
                at
                truck2
                s2
            )
            (
                at
                package1
                s1
            )
            (
                at
                package2
                s1
            )
            (
                at
                package3
                s2
            )
        )
    )
)
---- pddl/driverlog-pfile3.pddl END ----
---- pddl/openstacks-p03-domain.pddl ----
(
    define
    (
        domain
        openstacks-sequencedstrips-nonADL-nonNegated
    )
    (
        :requirements
        :typing
        :action-costs
    )
    (
        :types
        order
        product
        count
        manager-agent
        manufacturer-agent
    )
    (
        :constants
        p1
        p2
        p3
        p4
        p5
        -
        product
        o1
        o2
        o3
        o4
        o5
        -
        order
        manager
        -
        manager-agent
        manufacturer
        -
        manufacturer-agent
    )
    (
        :predicates
        (
            includes
            ?o
            -
            order
            ?p
            -
            product
        )
        (
            waiting
            ?o
            -
            order
        )
        (
            started
            ?o
            -
            order
        )
        (
            shipped
            ?o
            -
            order
        )
        (
            made
            ?p
            -
            product
        )
        (
            not-made
            ?p
            -
            product
        )
        (
            stacks-avail
            ?s
            -
            count
        )
        (
            next-count
            ?s
            ?ns
            -
            count
        )
    )
    (
        :functions
        (
            total-cost
        )
        -
        number
    )
    (
        :action
        open-new-stack
        :parameters
        (
            ?man
            -
            manufacturer-agent
            ?open
            ?new-open
            -
            count
        )
        :precondition
        (
            and
            (
                stacks-avail
                ?open
            )
            (
                next-count
                ?open
                ?new-open
            )
        )
        :effect
        (
            and
            (
                not
                (
                    stacks-avail
                    ?open
                )
            )
            (
                stacks-avail
                ?new-open
            )
            (
                increase
                (
                    total-cost
                )
                1
            )
        )
    )
    (
        :action
        start-order
        :parameters
        (
            ?man
            -
            manager-agent
            ?o
            -
            order
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                waiting
                ?o
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?new-avail
                ?avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    waiting
                    ?o
                )
            )
            (
                started
                ?o
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
    (
        :action
        make-product-p1
        :parameters
        (
            ?man
            -
            manufacturer-agent
        )
        :precondition
        (
            and
            (
                not-made
                p1
            )
            (
                started
                o2
            )
        )
        :effect
        (
            and
            (
                not
                (
                    not-made
                    p1
                )
            )
            (
                made
                p1
            )
        )
    )
    (
        :action
        make-product-p2
        :parameters
        (
            ?man
            -
            manufacturer-agent
        )
        :precondition
        (
            and
            (
                not-made
                p2
            )
            (
                started
                o1
            )
            (
                started
                o2
            )
        )
        :effect
        (
            and
            (
                not
                (
                    not-made
                    p2
                )
            )
            (
                made
                p2
            )
        )
    )
    (
        :action
        make-product-p3
        :parameters
        (
            ?man
            -
            manufacturer-agent
        )
        :precondition
        (
            and
            (
                not-made
                p3
            )
            (
                started
                o3
            )
            (
                started
                o4
            )
        )
        :effect
        (
            and
            (
                not
                (
                    not-made
                    p3
                )
            )
            (
                made
                p3
            )
        )
    )
    (
        :action
        make-product-p4
        :parameters
        (
            ?man
            -
            manufacturer-agent
        )
        :precondition
        (
            and
            (
                not-made
                p4
            )
            (
                started
                o4
            )
        )
        :effect
        (
            and
            (
                not
                (
                    not-made
                    p4
                )
            )
            (
                made
                p4
            )
        )
    )
    (
        :action
        make-product-p5
        :parameters
        (
            ?man
            -
            manufacturer-agent
        )
        :precondition
        (
            and
            (
                not-made
                p5
            )
            (
                started
                o5
            )
        )
        :effect
        (
            and
            (
                not
                (
                    not-made
                    p5
                )
            )
            (
                made
                p5
            )
        )
    )
    (
        :action
        ship-order-o1
        :parameters
        (
            ?man
            -
            manager-agent
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                started
                o1
            )
            (
                made
                p2
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?avail
                ?new-avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    started
                    o1
                )
            )
            (
                shipped
                o1
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
    (
        :action
        ship-order-o2
        :parameters
        (
            ?man
            -
            manager-agent
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                started
                o2
            )
            (
                made
                p1
            )
            (
                made
                p2
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?avail
                ?new-avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    started
                    o2
                )
            )
            (
                shipped
                o2
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
    (
        :action
        ship-order-o3
        :parameters
        (
            ?man
            -
            manager-agent
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                started
                o3
            )
            (
                made
                p3
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?avail
                ?new-avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    started
                    o3
                )
            )
            (
                shipped
                o3
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
    (
        :action
        ship-order-o4
        :parameters
        (
            ?man
            -
            manager-agent
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                started
                o4
            )
            (
                made
                p3
            )
            (
                made
                p4
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?avail
                ?new-avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    started
                    o4
                )
            )
            (
                shipped
                o4
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
    (
        :action
        ship-order-o5
        :parameters
        (
            ?man
            -
            manager-agent
            ?avail
            ?new-avail
            -
            count
        )
        :precondition
        (
            and
            (
                started
                o5
            )
            (
                made
                p5
            )
            (
                stacks-avail
                ?avail
            )
            (
                next-count
                ?avail
                ?new-avail
            )
        )
        :effect
        (
            and
            (
                not
                (
                    started
                    o5
                )
            )
            (
                shipped
                o5
            )
            (
                not
                (
                    stacks-avail
                    ?avail
                )
            )
            (
                stacks-avail
                ?new-avail
            )
        )
    )
)
---- pddl/openstacks-p03-domain.pddl END ----
---- pddl/openstacks-p03.pddl ----
(
    define
    (
        problem
        os-sequencedstrips-p5_3
    )
    (
        :domain
        openstacks-sequencedstrips-nonADL-nonNegated
    )
    (
        :objects
        n0
        n1
        n2
        n3
        n4
        n5
        -
        count
    )
    (
        :init
        (
            next-count
            n0
            n1
        )
        (
            next-count
            n1
            n2
        )
        (
            next-count
            n2
            n3
        )
        (
            next-count
            n3
            n4
        )
        (
            next-count
            n4
            n5
        )
        (
            stacks-avail
            n0
        )
        (
            waiting
            o1
        )
        (
            includes
            o1
            p3
        )
        (
            waiting
            o2
        )
        (
            includes
            o2
            p4
        )
        (
            waiting
            o3
        )
        (
            includes
            o3
            p4
        )
        (
            waiting
            o4
        )
        (
            includes
            o4
            p2
        )
        (
            includes
            o4
            p5
        )
        (
            waiting
            o5
        )
        (
            includes
            o5
            p1
        )
        (
            not-made
            p1
        )
        (
            not-made
            p2
        )
        (
            not-made
            p3
        )
        (
            not-made
            p4
        )
        (
            not-made
            p5
        )
        (
            =
            (
                total-cost
            )
            0
        )
    )
    (
        :goal
        (
            and
            (
                shipped
                o1
            )
            (
                shipped
                o2
            )
            (
                shipped
                o3
            )
            (
                shipped
                o4
            )
            (
                shipped
                o5
            )
        )
    )
    (
        :metric
        minimize
        (
            total-cost
        )
    )
)
---- pddl/openstacks-p03.pddl END ----
---- pddl/rovers-domain.pddl ----
(
    define
    (
        domain
        Rover
    )
    (
        :requirements
        :typing
    )
    (
        :types
        rover
        waypoint
        store
        camera
        mode
        lander
        objective
    )
    (
        :predicates
        (
            at
            ?x
            -
            rover
            ?y
            -
            waypoint
        )
        (
            at_lander
            ?x
            -
            lander
            ?y
            -
            waypoint
        )
        (
            can_traverse
            ?r
            -
            rover
            ?x
            -
            waypoint
            ?y
            -
            waypoint
        )
        (
            equipped_for_soil_analysis
            ?r
            -
            rover
        )
        (
            equipped_for_rock_analysis
            ?r
            -
            rover
        )
        (
            equipped_for_imaging
            ?r
            -
            rover
        )
        (
            empty
            ?s
            -
            store
        )
        (
            have_rock_analysis
            ?r
            -
            rover
            ?w
            -
            waypoint
        )
        (
            have_soil_analysis
            ?r
            -
            rover
            ?w
            -
            waypoint
        )
        (
            full
            ?s
            -
            store
        )
        (
            calibrated
            ?c
            -
            camera
            ?r
            -
            rover
        )
        (
            supports
            ?c
            -
            camera
            ?m
            -
            mode
        )
        (
            available
            ?r
            -
            rover
        )
        (
            visible
            ?w
            -
            waypoint
            ?p
            -
            waypoint
        )
        (
            have_image
            ?r
            -
            rover
            ?o
            -
            objective
            ?m
            -
            mode
        )
        (
            communicated_soil_data
            ?w
            -
            waypoint
        )
        (
            communicated_rock_data
            ?w
            -
            waypoint
        )
        (
            communicated_image_data
            ?o
            -
            objective
            ?m
            -
            mode
        )
        (
            at_soil_sample
            ?w
            -
            waypoint
        )
        (
            at_rock_sample
            ?w
            -
            waypoint
        )
        (
            visible_from
            ?o
            -
            objective
            ?w
            -
            waypoint
        )
        (
            store_of
            ?s
            -
            store
            ?r
            -
            rover
        )
        (
            calibration_target
            ?i
            -
            camera
            ?o
            -
            objective
        )
        (
            on_board
            ?i
            -
            camera
            ?r
            -
            rover
        )
        (
            channel_free
            ?l
            -
            lander
        )
    )
    (
        :action
        navigate
        :parameters
        (
            ?x
            -
            rover
            ?y
            -
            waypoint
            ?z
            -
            waypoint
        )
        :precondition
        (
            and
            (
                can_traverse
                ?x
                ?y
                ?z
            )
            (
                available
                ?x
            )
            (
                at
                ?x
                ?y
            )
            (
                visible
                ?y
                ?z
            )
        )
        :effect
        (
            and
            (
                not
                (
                    at
                    ?x
                    ?y
                )
            )
            (
                at
                ?x
                ?z
            )
        )
    )
    (
        :action
        sample_soil
        :parameters
        (
            ?x
            -
            rover
            ?s
            -
            store
            ?p
            -
            waypoint
        )
        :precondition
        (
            and
            (
                at
                ?x
                ?p
            )
            (
                at_soil_sample
                ?p
            )
            (
                equipped_for_soil_analysis
                ?x
            )
            (
                store_of
                ?s
                ?x
            )
            (
                empty
                ?s
            )
        )
        :effect
        (
            and
            (
                not
                (
                    empty
                    ?s
                )
            )
            (
                full
                ?s
            )
            (
                have_soil_analysis
                ?x
                ?p
            )
            (
                not
                (
                    at_soil_sample
                    ?p
                )
            )
        )
    )
    (
        :action
        sample_rock
        :parameters
        (
            ?x
            -
            rover
            ?s
            -
            store
            ?p
            -
            waypoint
        )
        :precondition
        (
            and
            (
                at
                ?x
                ?p
            )
            (
                at_rock_sample
                ?p
            )
            (
                equipped_for_rock_analysis
                ?x
            )
            (
                store_of
                ?s
                ?x
            )
            (
                empty
                ?s
            )
        )
        :effect
        (
            and
            (
                not
                (
                    empty
                    ?s
                )
            )
            (
                full
                ?s
            )
            (
                have_rock_analysis
                ?x
                ?p
            )
            (
                not
                (
                    at_rock_sample
                    ?p
                )
            )
        )
    )
    (
        :action
        drop
        :parameters
        (
            ?x
            -
            rover
            ?y
            -
            store
        )
        :precondition
        (
            and
            (
                store_of
                ?y
                ?x
            )
            (
                full
                ?y
            )
        )
        :effect
        (
            and
            (
                not
                (
                    full
                    ?y
                )
            )
            (
                empty
                ?y
            )
        )
    )
    (
        :action
        calibrate
        :parameters
        (
            ?r
            -
            rover
            ?i
            -
            camera
            ?t
            -
            objective
            ?w
            -
            waypoint
        )
        :precondition
        (
            and
            (
                equipped_for_imaging
                ?r
            )
            (
                calibration_target
                ?i
                ?t
            )
            (
                at
                ?r
                ?w
            )
            (
                visible_from
                ?t
                ?w
            )
            (
                on_board
                ?i
                ?r
            )
        )
        :effect
        (
            calibrated
            ?i
            ?r
        )
    )
    (
        :action
        take_image
        :parameters
        (
            ?r
            -
            rover
            ?p
            -
            waypoint
            ?o
            -
            objective
            ?i
            -
            camera
            ?m
            -
            mode
        )
        :precondition
        (
            and
            (
                calibrated
                ?i
                ?r
            )
            (
                on_board
                ?i
                ?r
            )
            (
                equipped_for_imaging
                ?r
            )
            (
                supports
                ?i
                ?m
            )
            (
                visible_from
                ?o
                ?p
            )
            (
                at
                ?r
                ?p
            )
        )
        :effect
        (
            and
            (
                have_image
                ?r
                ?o
                ?m
            )
            (
                not
                (
                    calibrated
                    ?i
                    ?r
                )
            )
        )
    )
    (
        :action
        communicate_soil_data
        :parameters
        (
            ?r
            -
            rover
            ?l
            -
            lander
            ?p
            -
            waypoint
            ?x
            -
            waypoint
            ?y
            -
            waypoint
        )
        :precondition
        (
            and
            (
                at
                ?r
                ?x
            )
            (
                at_lander
                ?l
                ?y
            )
            (
                have_soil_analysis
                ?r
                ?p
            )
            (
                visible
                ?x
                ?y
            )
            (
                available
                ?r
            )
            (
                channel_free
                ?l
            )
        )
        :effect
        (
            and
            (
                not
                (
                    available
                    ?r
                )
            )
            (
                not
                (
                    channel_free
                    ?l
                )
            )
            (
                channel_free
                ?l
            )
            (
                communicated_soil_data
                ?p
            )
            (
                available
                ?r
            )
        )
    )
    (
        :action
        communicate_rock_data
        :parameters
        (
            ?r
            -
            rover
            ?l
            -
            lander
            ?p
            -
            waypoint
            ?x
            -
            waypoint
            ?y
            -
            waypoint
        )
        :precondition
        (
            and
            (
                at
                ?r
                ?x
            )
            (
                at_lander
                ?l
                ?y
            )
            (
                have_rock_analysis
                ?r
                ?p
            )
            (
                visible
                ?x
                ?y
            )
            (
                available
                ?r
            )
            (
                channel_free
                ?l
            )
        )
        :effect
        (
            and
            (
                not
                (
                    available
                    ?r
                )
            )
            (
                not
                (
                    channel_free
                    ?l
                )
            )
            (
                channel_free
                ?l
            )
            (
                communicated_rock_data
                ?p
            )
            (
                available
                ?r
            )
        )
    )
    (
        :action
        communicate_image_data
        :parameters
        (
            ?r
            -
            rover
            ?l
            -
            lander
            ?o
            -
            objective
            ?m
            -
            mode
            ?x
            -
            waypoint
            ?y
            -
            waypoint
        )
        :precondition
        (
            and
            (
                at
                ?r
                ?x
            )
            (
                at_lander
                ?l
                ?y
            )
            (
                have_image
                ?r
                ?o
                ?m
            )
            (
                visible
                ?x
                ?y
            )
            (
                available
                ?r
            )
            (
                channel_free
                ?l
            )
        )
        :effect
        (
            and
            (
                not
                (
                    available
                    ?r
                )
            )
            (
                not
                (
                    channel_free
                    ?l
                )
            )
            (
                channel_free
                ?l
            )
            (
                communicated_image_data
                ?o
                ?m
            )
            (
                available
                ?r
            )
        )
    )
)
---- pddl/rovers-domain.pddl END ----
---- pddl/rovers-p01.pddl ----
(
    define
    (
        problem
        roverprob1234
    )
    (
        :domain
        Rover
    )
    (
        :requirements
        :typing
    )
    (
        :objects
        general
        -
        Lander
        colour
        high_res
        low_res
        -
        Mode
        rover0
        -
        Rover
        rover0store
        -
        Store
        waypoint0
        waypoint1
        waypoint2
        waypoint3
        -
        Waypoint
        camera0
        -
        Camera
        objective0
        objective1
        -
        Objective
    )
    (
        :init
        (
            visible
            waypoint1
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint1
        )
        (
            visible
            waypoint2
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint2
        )
        (
            visible
            waypoint3
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint3
        )
        (
            at_soil_sample
            waypoint0
        )
        (
            at_rock_sample
            waypoint1
        )
        (
            at_soil_sample
            waypoint2
        )
        (
            at_rock_sample
            waypoint2
        )
        (
            at_soil_sample
            waypoint3
        )
        (
            at_rock_sample
            waypoint3
        )
        (
            at_lander
            general
            waypoint0
        )
        (
            channel_free
            general
        )
        (
            at
            rover0
            waypoint3
        )
        (
            available
            rover0
        )
        (
            store_of
            rover0store
            rover0
        )
        (
            empty
            rover0store
        )
        (
            equipped_for_soil_analysis
            rover0
        )
        (
            equipped_for_rock_analysis
            rover0
        )
        (
            equipped_for_imaging
            rover0
        )
        (
            can_traverse
            rover0
            waypoint3
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint3
        )
        (
            can_traverse
            rover0
            waypoint3
            waypoint1
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint3
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint2
        )
        (
            can_traverse
            rover0
            waypoint2
            waypoint1
        )
        (
            on_board
            camera0
            rover0
        )
        (
            calibration_target
            camera0
            objective1
        )
        (
            supports
            camera0
            colour
        )
        (
            supports
            camera0
            high_res
        )
        (
            visible_from
            objective0
            waypoint0
        )
        (
            visible_from
            objective0
            waypoint1
        )
        (
            visible_from
            objective0
            waypoint2
        )
        (
            visible_from
            objective0
            waypoint3
        )
        (
            visible_from
            objective1
            waypoint0
        )
        (
            visible_from
            objective1
            waypoint1
        )
        (
            visible_from
            objective1
            waypoint2
        )
        (
            visible_from
            objective1
            waypoint3
        )
    )
    (
        :goal
        (
            and
            (
                communicated_soil_data
                waypoint2
            )
            (
                communicated_rock_data
                waypoint3
            )
            (
                communicated_image_data
                objective1
                high_res
            )
        )
    )
)
---- pddl/rovers-p01.pddl END ----
---- pddl/rovers-p02.pddl ----
(
    define
    (
        problem
        roverprob4213
    )
    (
        :domain
        Rover
    )
    (
        :objects
        general
        -
        Lander
        colour
        high_res
        low_res
        -
        Mode
        rover0
        -
        Rover
        rover0store
        -
        Store
        waypoint0
        waypoint1
        waypoint2
        waypoint3
        -
        Waypoint
        camera0
        camera1
        -
        Camera
        objective0
        objective1
        -
        Objective
    )
    (
        :init
        (
            visible
            waypoint0
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint0
        )
        (
            visible
            waypoint1
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint1
        )
        (
            visible
            waypoint2
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint2
        )
        (
            visible
            waypoint3
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint3
        )
        (
            at_soil_sample
            waypoint0
        )
        (
            at_rock_sample
            waypoint0
        )
        (
            at_lander
            general
            waypoint1
        )
        (
            channel_free
            general
        )
        (
            at
            rover0
            waypoint0
        )
        (
            available
            rover0
        )
        (
            store_of
            rover0store
            rover0
        )
        (
            empty
            rover0store
        )
        (
            equipped_for_soil_analysis
            rover0
        )
        (
            equipped_for_rock_analysis
            rover0
        )
        (
            equipped_for_imaging
            rover0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint1
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint2
        )
        (
            can_traverse
            rover0
            waypoint2
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint3
        )
        (
            can_traverse
            rover0
            waypoint3
            waypoint0
        )
        (
            on_board
            camera0
            rover0
        )
        (
            calibration_target
            camera0
            objective0
        )
        (
            supports
            camera0
            colour
        )
        (
            supports
            camera0
            high_res
        )
        (
            supports
            camera0
            low_res
        )
        (
            on_board
            camera1
            rover0
        )
        (
            calibration_target
            camera1
            objective1
        )
        (
            supports
            camera1
            high_res
        )
        (
            visible_from
            objective0
            waypoint0
        )
        (
            visible_from
            objective1
            waypoint0
        )
        (
            visible_from
            objective1
            waypoint1
        )
        (
            visible_from
            objective1
            waypoint2
        )
    )
    (
        :goal
        (
            and
            (
                communicated_soil_data
                waypoint0
            )
            (
                communicated_rock_data
                waypoint0
            )
            (
                communicated_image_data
                objective1
                low_res
            )
        )
    )
)
---- pddl/rovers-p02.pddl END ----
---- pddl/rovers-p03.pddl ----
(
    define
    (
        problem
        roverprob3726
    )
    (
        :domain
        Rover
    )
    (
        :objects
        general
        -
        Lander
        colour
        high_res
        low_res
        -
        Mode
        rover0
        rover1
        -
        Rover
        rover0store
        rover1store
        -
        Store
        waypoint0
        waypoint1
        waypoint2
        waypoint3
        -
        Waypoint
        camera0
        camera1
        -
        Camera
        objective0
        objective1
        -
        Objective
    )
    (
        :init
        (
            visible
            waypoint0
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint0
        )
        (
            visible
            waypoint1
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint1
        )
        (
            visible
            waypoint2
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint2
        )
        (
            visible
            waypoint3
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint3
        )
        (
            at_rock_sample
            waypoint0
        )
        (
            at_rock_sample
            waypoint1
        )
        (
            at_soil_sample
            waypoint2
        )
        (
            at_rock_sample
            waypoint2
        )
        (
            at_lander
            general
            waypoint0
        )
        (
            channel_free
            general
        )
        (
            at
            rover0
            waypoint1
        )
        (
            available
            rover0
        )
        (
            store_of
            rover0store
            rover0
        )
        (
            empty
            rover0store
        )
        (
            equipped_for_soil_analysis
            rover0
        )
        (
            equipped_for_rock_analysis
            rover0
        )
        (
            equipped_for_imaging
            rover0
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint1
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint3
        )
        (
            can_traverse
            rover0
            waypoint3
            waypoint1
        )
        (
            at
            rover1
            waypoint3
        )
        (
            available
            rover1
        )
        (
            store_of
            rover1store
            rover1
        )
        (
            empty
            rover1store
        )
        (
            equipped_for_soil_analysis
            rover1
        )
        (
            equipped_for_rock_analysis
            rover1
        )
        (
            equipped_for_imaging
            rover1
        )
        (
            can_traverse
            rover1
            waypoint3
            waypoint0
        )
        (
            can_traverse
            rover1
            waypoint0
            waypoint3
        )
        (
            can_traverse
            rover1
            waypoint3
            waypoint2
        )
        (
            can_traverse
            rover1
            waypoint2
            waypoint3
        )
        (
            can_traverse
            rover1
            waypoint0
            waypoint1
        )
        (
            can_traverse
            rover1
            waypoint1
            waypoint0
        )
        (
            on_board
            camera0
            rover0
        )
        (
            calibration_target
            camera0
            objective1
        )
        (
            supports
            camera0
            low_res
        )
        (
            on_board
            camera1
            rover1
        )
        (
            calibration_target
            camera1
            objective0
        )
        (
            supports
            camera1
            colour
        )
        (
            supports
            camera1
            high_res
        )
        (
            supports
            camera1
            low_res
        )
        (
            visible_from
            objective0
            waypoint0
        )
        (
            visible_from
            objective0
            waypoint1
        )
        (
            visible_from
            objective1
            waypoint0
        )
        (
            visible_from
            objective1
            waypoint1
        )
    )
    (
        :goal
        (
            and
            (
                communicated_soil_data
                waypoint2
            )
            (
                communicated_rock_data
                waypoint0
            )
            (
                communicated_image_data
                objective0
                colour
            )
        )
    )
)
---- pddl/rovers-p03.pddl END ----
---- pddl/rovers-p15.pddl ----
(
    define
    (
        problem
        roverprob4135
    )
    (
        :domain
        Rover
    )
    (
        :objects
        general
        -
        Lander
        colour
        high_res
        low_res
        -
        Mode
        rover0
        rover1
        rover2
        rover3
        -
        Rover
        rover0store
        rover1store
        rover2store
        rover3store
        -
        Store
        waypoint0
        waypoint1
        waypoint2
        waypoint3
        waypoint4
        waypoint5
        waypoint6
        waypoint7
        waypoint8
        waypoint9
        waypoint10
        -
        Waypoint
        camera0
        camera1
        camera2
        camera3
        -
        Camera
        objective0
        objective1
        objective2
        objective3
        objective4
        -
        Objective
    )
    (
        :init
        (
            visible
            waypoint0
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint0
        )
        (
            visible
            waypoint1
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint5
        )
        (
            visible
            waypoint5
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint7
        )
        (
            visible
            waypoint7
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint8
        )
        (
            visible
            waypoint8
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint1
        )
        (
            visible
            waypoint2
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint2
        )
        (
            visible
            waypoint3
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint9
        )
        (
            visible
            waypoint9
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint3
        )
        (
            visible
            waypoint4
            waypoint1
        )
        (
            visible
            waypoint1
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint5
        )
        (
            visible
            waypoint5
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint8
        )
        (
            visible
            waypoint8
            waypoint4
        )
        (
            visible
            waypoint5
            waypoint2
        )
        (
            visible
            waypoint2
            waypoint5
        )
        (
            visible
            waypoint5
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint5
        )
        (
            visible
            waypoint7
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint7
        )
        (
            visible
            waypoint7
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint7
        )
        (
            visible
            waypoint7
            waypoint5
        )
        (
            visible
            waypoint5
            waypoint7
        )
        (
            visible
            waypoint7
            waypoint9
        )
        (
            visible
            waypoint9
            waypoint7
        )
        (
            visible
            waypoint7
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint7
        )
        (
            visible
            waypoint8
            waypoint0
        )
        (
            visible
            waypoint0
            waypoint8
        )
        (
            visible
            waypoint8
            waypoint3
        )
        (
            visible
            waypoint3
            waypoint8
        )
        (
            visible
            waypoint9
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint9
        )
        (
            visible
            waypoint9
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint9
        )
        (
            visible
            waypoint9
            waypoint8
        )
        (
            visible
            waypoint8
            waypoint9
        )
        (
            visible
            waypoint10
            waypoint4
        )
        (
            visible
            waypoint4
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint5
        )
        (
            visible
            waypoint5
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint6
        )
        (
            visible
            waypoint6
            waypoint10
        )
        (
            visible
            waypoint10
            waypoint8
        )
        (
            visible
            waypoint8
            waypoint10
        )
        (
            at_soil_sample
            waypoint0
        )
        (
            at_rock_sample
            waypoint1
        )
        (
            at_soil_sample
            waypoint2
        )
        (
            at_rock_sample
            waypoint2
        )
        (
            at_soil_sample
            waypoint4
        )
        (
            at_soil_sample
            waypoint5
        )
        (
            at_soil_sample
            waypoint7
        )
        (
            at_soil_sample
            waypoint8
        )
        (
            at_rock_sample
            waypoint8
        )
        (
            at_rock_sample
            waypoint9
        )
        (
            at_soil_sample
            waypoint10
        )
        (
            at_rock_sample
            waypoint10
        )
        (
            at_lander
            general
            waypoint9
        )
        (
            channel_free
            general
        )
        (
            at
            rover0
            waypoint4
        )
        (
            available
            rover0
        )
        (
            store_of
            rover0store
            rover0
        )
        (
            empty
            rover0store
        )
        (
            equipped_for_soil_analysis
            rover0
        )
        (
            equipped_for_imaging
            rover0
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint1
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint2
        )
        (
            can_traverse
            rover0
            waypoint2
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint5
        )
        (
            can_traverse
            rover0
            waypoint5
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint8
        )
        (
            can_traverse
            rover0
            waypoint8
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint9
        )
        (
            can_traverse
            rover0
            waypoint9
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint4
            waypoint10
        )
        (
            can_traverse
            rover0
            waypoint10
            waypoint4
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint3
        )
        (
            can_traverse
            rover0
            waypoint3
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint0
            waypoint7
        )
        (
            can_traverse
            rover0
            waypoint7
            waypoint0
        )
        (
            can_traverse
            rover0
            waypoint1
            waypoint6
        )
        (
            can_traverse
            rover0
            waypoint6
            waypoint1
        )
        (
            at
            rover1
            waypoint6
        )
        (
            available
            rover1
        )
        (
            store_of
            rover1store
            rover1
        )
        (
            empty
            rover1store
        )
        (
            equipped_for_imaging
            rover1
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint1
        )
        (
            can_traverse
            rover1
            waypoint1
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint2
        )
        (
            can_traverse
            rover1
            waypoint2
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint3
        )
        (
            can_traverse
            rover1
            waypoint3
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint4
        )
        (
            can_traverse
            rover1
            waypoint4
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint5
        )
        (
            can_traverse
            rover1
            waypoint5
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint6
            waypoint10
        )
        (
            can_traverse
            rover1
            waypoint10
            waypoint6
        )
        (
            can_traverse
            rover1
            waypoint1
            waypoint0
        )
        (
            can_traverse
            rover1
            waypoint0
            waypoint1
        )
        (
            can_traverse
            rover1
            waypoint1
            waypoint7
        )
        (
            can_traverse
            rover1
            waypoint7
            waypoint1
        )
        (
            can_traverse
            rover1
            waypoint1
            waypoint8
        )
        (
            can_traverse
            rover1
            waypoint8
            waypoint1
        )
        (
            can_traverse
            rover1
            waypoint3
            waypoint9
        )
        (
            can_traverse
            rover1
            waypoint9
            waypoint3
        )
        (
            at
            rover2
            waypoint6
        )
        (
            available
            rover2
        )
        (
            store_of
            rover2store
            rover2
        )
        (
            empty
            rover2store
        )
        (
            equipped_for_soil_analysis
            rover2
        )
        (
            can_traverse
            rover2
            waypoint6
            waypoint1
        )
        (
            can_traverse
            rover2
            waypoint1
            waypoint6
        )
        (
            can_traverse
            rover2
            waypoint6
            waypoint4
        )
        (
            can_traverse
            rover2
            waypoint4
            waypoint6
        )
        (
            can_traverse
            rover2
            waypoint6
            waypoint5
        )
        (
            can_traverse
            rover2
            waypoint5
            waypoint6
        )
        (
            can_traverse
            rover2
            waypoint6
            waypoint9
        )
        (
            can_traverse
            rover2
            waypoint9
            waypoint6
        )
        (
            can_traverse
            rover2
            waypoint6
            waypoint10
        )
        (
            can_traverse
            rover2
            waypoint10
            waypoint6
        )
        (
            can_traverse
            rover2
            waypoint1
            waypoint0
        )
        (
            can_traverse
            rover2
            waypoint0
            waypoint1
        )
        (
            can_traverse
            rover2
            waypoint1
            waypoint7
        )
        (
            can_traverse
            rover2
            waypoint7
            waypoint1
        )
        (
            can_traverse
            rover2
            waypoint4
            waypoint2
        )
        (
            can_traverse
            rover2
            waypoint2
            waypoint4
        )
        (
            can_traverse
            rover2
            waypoint9
            waypoint3
        )
        (
            can_traverse
            rover2
            waypoint3
            waypoint9
        )
        (
            can_traverse
            rover2
            waypoint9
            waypoint8
        )
        (
            can_traverse
            rover2
            waypoint8
            waypoint9
        )
        (
            at
            rover3
            waypoint4
        )
        (
            available
            rover3
        )
        (
            store_of
            rover3store
            rover3
        )
        (
            empty
            rover3store
        )
        (
            equipped_for_rock_analysis
            rover3
        )
        (
            equipped_for_imaging
            rover3
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint0
        )
        (
            can_traverse
            rover3
            waypoint0
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint1
        )
        (
            can_traverse
            rover3
            waypoint1
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint2
        )
        (
            can_traverse
            rover3
            waypoint2
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint5
        )
        (
            can_traverse
            rover3
            waypoint5
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint6
        )
        (
            can_traverse
            rover3
            waypoint6
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint8
        )
        (
            can_traverse
            rover3
            waypoint8
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint4
            waypoint9
        )
        (
            can_traverse
            rover3
            waypoint9
            waypoint4
        )
        (
            can_traverse
            rover3
            waypoint0
            waypoint7
        )
        (
            can_traverse
            rover3
            waypoint7
            waypoint0
        )
        (
            can_traverse
            rover3
            waypoint1
            waypoint3
        )
        (
            can_traverse
            rover3
            waypoint3
            waypoint1
        )
        (
            can_traverse
            rover3
            waypoint1
            waypoint10
        )
        (
            can_traverse
            rover3
            waypoint10
            waypoint1
        )
        (
            on_board
            camera0
            rover3
        )
        (
            calibration_target
            camera0
            objective2
        )
        (
            supports
            camera0
            low_res
        )
        (
            on_board
            camera1
            rover0
        )
        (
            calibration_target
            camera1
            objective4
        )
        (
            supports
            camera1
            colour
        )
        (
            supports
            camera1
            high_res
        )
        (
            supports
            camera1
            low_res
        )
        (
            on_board
            camera2
            rover1
        )
        (
            calibration_target
            camera2
            objective4
        )
        (
            supports
            camera2
            high_res
        )
        (
            supports
            camera2
            low_res
        )
        (
            on_board
            camera3
            rover1
        )
        (
            calibration_target
            camera3
            objective3
        )
        (
            supports
            camera3
            colour
        )
        (
            supports
            camera3
            high_res
        )
        (
            supports
            camera3
            low_res
        )
        (
            visible_from
            objective0
            waypoint0
        )
        (
            visible_from
            objective0
            waypoint1
        )
        (
            visible_from
            objective0
            waypoint2
        )
        (
            visible_from
            objective0
            waypoint3
        )
        (
            visible_from
            objective0
            waypoint4
        )
        (
            visible_from
            objective0
            waypoint5
        )
        (
            visible_from
            objective0
            waypoint6
        )
        (
            visible_from
            objective0
            waypoint7
        )
        (
            visible_from
            objective0
            waypoint8
        )
        (
            visible_from
            objective0
            waypoint9
        )
        (
            visible_from
            objective0
            waypoint10
        )
        (
            visible_from
            objective1
            waypoint0
        )
        (
            visible_from
            objective1
            waypoint1
        )
        (
            visible_from
            objective1
            waypoint2
        )
        (
            visible_from
            objective1
            waypoint3
        )
        (
            visible_from
            objective1
            waypoint4
        )
        (
            visible_from
            objective1
            waypoint5
        )
        (
            visible_from
            objective1
            waypoint6
        )
        (
            visible_from
            objective1
            waypoint7
        )
        (
            visible_from
            objective1
            waypoint8
        )
        (
            visible_from
            objective1
            waypoint9
        )
        (
            visible_from
            objective2
            waypoint0
        )
        (
            visible_from
            objective2
            waypoint1
        )
        (
            visible_from
            objective2
            waypoint2
        )
        (
            visible_from
            objective3
            waypoint0
        )
        (
            visible_from
            objective3
            waypoint1
        )
        (
            visible_from
            objective3
            waypoint2
        )
        (
            visible_from
            objective3
            waypoint3
        )
        (
            visible_from
            objective3
            waypoint4
        )
        (
            visible_from
            objective4
            waypoint0
        )
        (
            visible_from
            objective4
            waypoint1
        )
        (
            visible_from
            objective4
            waypoint2
        )
        (
            visible_from
            objective4
            waypoint3
        )
        (
            visible_from
            objective4
            waypoint4
        )
        (
            visible_from
            objective4
            waypoint5
        )
        (
            visible_from
            objective4
            waypoint6
        )
        (
            visible_from
            objective4
            waypoint7
        )
        (
            visible_from
            objective4
            waypoint8
        )
        (
            visible_from
            objective4
            waypoint9
        )
    )
    (
        :goal
        (
            and
            (
                communicated_soil_data
                waypoint5
            )
            (
                communicated_soil_data
                waypoint2
            )
            (
                communicated_soil_data
                waypoint8
            )
            (
                communicated_soil_data
                waypoint10
            )
            (
                communicated_soil_data
                waypoint0
            )
            (
                communicated_rock_data
                waypoint2
            )
            (
                communicated_rock_data
                waypoint1
            )
            (
                communicated_rock_data
                waypoint8
            )
            (
                communicated_image_data
                objective1
                low_res
            )
            (
                communicated_image_data
                objective1
                high_res
            )
        )
    )
)
---- pddl/rovers-p15.pddl END ----
