/*
message PlanMAMsgPublicState {
    required int32 agent_id = 1;
    required bytes state = 2;
    required int32 state_id = 3;
    required int32 cost = 4;
    required int32 heuristic = 5;
}

message PlanMAMsgHeurFFRequest {
    // Source agent
    required int32 agent_id = 1;
    // State from which to find heuristic value
    repeated int32 state = 3;
    // Global operator ID
    required int32 op_id = 4;
}

message PlanMAMsgHeurFFResponseOp {
    required int32 op_id = 1;
    optional int32 cost = 2;
    optional int32 owner = 3;
}

message PlanMAMsgHeurFFResponse {
    // Operator for which this is response
    required int32 op_id = 1;
    // List of operators in relaxed plan
    repeated PlanMAMsgHeurFFResponseOp op = 2;
    // List of operators in relaxed plan that belong to other peers
    repeated PlanMAMsgHeurFFResponseOp peer_op = 3;
}

message PlanMAMsgHeurMaxOp {
    required int32 op_id = 1;
    required int32 value = 2;
}

message PlanMAMsgHeurMaxRequest {
    // Source agent
    required int32 agent_id = 1;
    // State from which to find heuristic value
    repeated int32 state = 3;
    // Projected/public operators and their values
    repeated PlanMAMsgHeurMaxOp op = 4;
}

message PlanMAMsgHeurMaxResponse {
    // Source agent
    required int32 agent_id = 1;
    // Projected/public operators and their values
    repeated PlanMAMsgHeurMaxOp op = 4;
}

message PlanMAMsgPathOperator {
    // Name of the operator
    required string name = 1;
    // Cost of the operator
    required int32 cost = 2;
}

message PlanMAMsgTracePath {
    // The agent who started the trace path operation
    required int32 origin_agent_id = 1;
    // State from which the back tracing should start
    required int32 state_id = 2;
    // The path traced so far
    repeated PlanMAMsgPathOperator path = 3;
    // True if the tracing is done
    required bool done = 4;
}

message PlanMAMsgSolution {
    // Public state the is a solution
    required PlanMAMsgPublicState state = 1;
    // Unique token associated with the solution
    required int32 token = 2;
}

message PlanMAMsgSolutionAck {
    required int32 agent_id = 1;
    required bool ack = 2;
    required int32 token = 3;
}

message PlanMAMsgSolutionMark {
    required int32 agent_id = 1;
    required int32 token = 2;
}

message PlanMAMsgTerminateRequest {
    required int32 agent_id = 1;
}

message PlanMAMsg {
    enum Type {
        TERMINATE         = 0x0101;
        TERMINATE_REQUEST = 0x0102;

        TRACE_PATH = 0x0201;

        SEARCH_PUBLIC_STATE = 0x0401;

        HEUR_FF_REQUEST  = 0x0811;
        HEUR_FF_RESPONSE = 0x0821;
        HEUR_MAX_REQUEST  = 0x0812;
        HEUR_MAX_RESPONSE = 0x0822;

        SOLUTION      = 0x1001;
        SOLUTION_ACK  = 0x1002;
        SOLUTION_MARK = 0x1003;
    }

    required Type type = 1;

    optional PlanMAMsgPublicState public_state = 2;
    optional PlanMAMsgTracePath trace_path = 3;
    optional PlanMAMsgHeurFFRequest heur_ff_request = 4;
    optional PlanMAMsgHeurFFResponse heur_ff_response = 5;
    optional PlanMAMsgSolution solution = 6;
    optional PlanMAMsgSolutionAck solution_ack = 7;
    optional PlanMAMsgSolutionMark solution_mark = 8;
    optional PlanMAMsgTerminateRequest terminate_request = 9;
    optional PlanMAMsgHeurMaxRequest heur_max_request = 10;
    optional PlanMAMsgHeurMaxResponse heur_max_response = 11;
}
*/

message PlanMAMsg {
    required int32 type = 1;
    required int32 agent_id = 2;

    optional int32 terminate_agent_id = 3;
}
